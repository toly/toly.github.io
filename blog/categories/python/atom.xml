<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Toly blog]]></title>
  <link href="http://toly.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://toly.github.io/"/>
  <updated>2014-03-26T09:59:38+04:00</updated>
  <id>http://toly.github.io/</id>
  <author>
    <name><![CDATA[Toly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Проект на Django Rest Framework и AngularJS]]></title>
    <link href="http://toly.github.io/blog/2014/03/14/getting-started-with-django-rest-framework-and-angularjs/"/>
    <updated>2014-03-14T22:13:12+04:00</updated>
    <id>http://toly.github.io/blog/2014/03/14/getting-started-with-django-rest-framework-and-angularjs</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Перевод статьи Кевина Стоуна <a href="http://blog.kevinastone.com/getting-started-with-django-rest-framework-and-angularjs.html">Getting Started with Django Rest Framework and AngularJS</a></p>
</blockquote>

<p>RESTful API становится стандартным компонентом любого современного веб-приложения. <em>Django Rest Framework</em> является мощным фреймворком для разработки REST API на основе вашего Django проекта. <em>AngularJS</em> - современный JavaScript фреймворк для создания сложных клиентских веб-приложений. Он фокусируется на сильном разделении функциональных частей (MVC) и использовании зависимостей для поощрения создания поддерживаемых (и тестируемых) модулей, которые будучи интегрированными предоставляли богатую функциональность на стороне клиента.</p>

<p>В этом посте я покажу создание проекта для примера, который преоставляет REST API, используемый фреймворком AngularJS на клиенте, что бы продемонстрировать как совместно использовать бекенд и фронтенд для упрощения создания сложных приложений.</p>

<!-- more -->

<h2 id="django-">Давайте сделаем тестовый Django проект</h2>

<p>Для примера, давайте создадим простое приложение для обмена фотографиями (что-то типа примитивного Instagram) и выдачи ленты для отдельного пользователя, что бы смотреть фотографии размещенные на сайте.</p>

<p>Все примеры кода для этого проекта доступны в <a href="https://github.com/kevinastone/django-api-rest-and-angular">репозитории на github</a>. Что бы установить тестовый проект локально, ознакомьтесь с <a href="https://github.com/kevinastone/django-api-rest-and-angular/blob/master/Readme.markdown">инструкцией по установке</a>, включенной в репозиторий. Там же описана установка AngularJS (и других javascript библиотек) через <a href="http://yeoman.io/"><strong>bower</strong> и <strong>grunt</strong></a>.</p>

<p>Наконец, есть тестовые данные, доступные в виде фикстур, для демонстрации API. У нас есть несколько пользователей ([‘Bob’, ‘Sally’, ‘Joe’, ‘Rachel’]), два поста ([‘This is a great post’, ‘Another thing I wanted to share’]) и также несколько тестовых фотографий. Прилагаемый <em>Makefile</em> строит для вас тестовые данные.</p>

<p>Несколько замечаний о примерах кода:</p>

<ul>
  <li>Я пропущу подробности конфигурирования, сборки и запуска приложения. В инструкции, размещенной в репозитории, описаны многие из этих деталей. Если что - сообщайте о любых приблемах на github.</li>
  <li>Я написал код клиентской части на <strong>Coffee-Script</strong>, так как считаю его более понятным и более эффективным (и немного питоничным). В репозитории находится Grun-файл, который собирает все Coffee-Script файлы объединяет их в один файл - script.js для использования на клиенте.</li>
</ul>

<h2 id="section">Уровень данных проекта (модели)</h2>

<p>Наша модель данных такая же простая, как и в водном уроке для Django. У вас есть три модели: User (пользователь), Post (пост) и Photo (фотография). Пользователь может быть автором множества постов (а также иметь много фолловеров), пост может содержать много фотографий (что-то вроде альбома или галлереи) вместе с названием и необязательным описанием.</p>

<p>``` python
from django.db import models</p>

<p>from django.contrib.auth.models import AbstractUser</p>

<p>class User(AbstractUser):
    followers = models.ManyToManyField(‘self’, related_name=’followees’, symmetrical=False)</p>

<p>class Post(models.Model):
    author = models.ForeignKey(User, related_name=’posts’)
    title = models.CharField(max_length=255)
    body = models.TextField(blank=True, null=True)</p>

<p>class Photo(models.Model):
    post = models.ForeignKey(Post, related_name=’photos’)
    image = models.ImageField(upload_to=”%Y/%m/%d”)
```</p>

<h2 id="api--django-rest-framework">API на Django Rest Framework</h2>

<p>Django Rest Framework предоставляет готовую архитектуру для разработки как простых RESTful API, так и более сложных конструкций. Его ключевая особенность, это четкое разделение на сериализаторы, которые описывают соответствие между моделью и ее форматом представления (будь то JSON, XML или любой другой формат), и на отдельный набор универсальных представлениях на основе классов (Class-Based-Views), которые могут быть по необходимости расширены. Вы так же можете определить свою ссылочную структуру, вместо использования дефолтной. Это то, что отличает Django Rest Framework от других фреймворков, таких как Tastypie и Piston, которые автоматизируют формировнаие API на основе моделей, но это происходит за счет снижения гибкости и применимости к различным нестандартным требованиям (особенно, если речь идет о доступах и вложенных ресурсах).</p>

<h2 id="section-1">Сериализаторы моделей</h2>

<p>Сериализаторы в Django Rest Framework предназначены для преобразования экземпляров django-модели в API представление. Это дает нам возможность конвертировать любые типы данных, или предоставлять дополнительную информацию о данной модели. Например, для пользователя, мы только откроем некоторые поля, скрывая некоторые аттрибуты, такие как пароль и адрес електронной почты. Для фото, мы сконвертируем ImageField так, что бы возвращалась ссылка на изображение (а не путь во внутреннем медиа каталоге).</p>

<p>Для сериализатора <code>PostSerializer</code>, мы выбрали вставку данных автора прямо в пост (до этого в поле <code>author</code> была ссылка на данные автора). Это делает информацию доступнее для клиентской части, и не требует дополнительных запросов к API для дублирующихся авторов каждого поста. Альтернативный вариант сс сылкой на автора предоставлен закомментированной строкой для сравнения. Сильной стороной сериализаторов является то, что их можно расширить для создания дополнительных версий, которые используют ссылки на данные автора вместо вложенных данных (например, для вывода списка постов одного пользователя).</p>

<p>Что бы привязать данные автора к <code>PostSerializer</code>, нам придется сделать так, что бы эти данные поддерживались API представлением. Поэтому мы сделаем поле автора необязательным (<code>required=False</code>) в сериализаторе поста и добавим его в исключения валидации.</p>

<p>``` python
from rest_framework import serializers</p>

<p>from .models import User, Post, Photo</p>

<p>class UserSerializer(serializers.ModelSerializer):
    posts = serializers.HyperlinkedIdentityField(‘posts’, view_name=’userpost-list’, lookup_field=’username’)</p>

<pre><code>class Meta:
    model = User
    fields = ('id', 'username', 'first_name', 'last_name', 'posts', )
</code></pre>

<p>class PostSerializer(serializers.ModelSerializer):
    author = UserSerializer(required=False)
    photos = serializers.HyperlinkedIdentityField(‘photos’, view_name=’postphoto-list’)
    # author = serializers.HyperlinkedRelatedField(view_name=’user-detail’, lookup_field=’username’)</p>

<pre><code>def get_validation_exclusions(self):
    # Need to exclude `author` since we'll add that later based off the request
    exclusions = super(PostSerializer, self).get_validation_exclusions()
    return exclusions + ['author']

class Meta:
    model = Post
</code></pre>

<p>class PhotoSerializer(serializers.ModelSerializer):
    image = serializers.Field(‘image.url’)</p>

<pre><code>class Meta:
    model = Photo ```
</code></pre>

<p>Хорошо, загрузив тестовые данные, давайте попробуем поработать с этими сериализаторами. Возможно вы увидите предупреджающие сообщения <code>DeprecationWarning</code> из-за использования <code>HyperlinkedIdentityField</code> без предоставления объекта запроса для построения ссылки. В настоящих представлениях объект запроса присутствует, так что вы можете спокойно игнорировать эти сообщения.</p>

<p><code>python
&gt;&gt;&gt; from example.api.models import User
&gt;&gt;&gt; user = User.objects.get(username='bob')
&gt;&gt;&gt; from example.api.serializers import *
&gt;&gt;&gt; serializer = UserSerializer(user)
&gt;&gt;&gt; serializer.data
{'id': 2, 'username': u'bob', 'first_name': u'Bob', 'last_name': u'', 'posts': '/api/users/bob/posts'}
&gt;&gt;&gt; post = user.posts.all()[0]
&gt;&gt;&gt; PostSerializer(post).data
{'author': {'id': 2, 'username': u'bob', 'first_name': u'Bob', 'last_name': u'', 'posts': '/api/users/bob/posts'}, 'photos': '/api/posts/2/photos', u'id': 2, 'title': u'Title #2', 'body': u'Another thing I wanted to share'}
&gt;&gt;&gt; serializer = PostSerializer(user.posts.all(), many=True)
&gt;&gt;&gt; serializer.data
[{'author': {'id': 2, 'username': u'bob', 'first_name': u'Bob', 'last_name': u'', 'posts': '/api/users/bob/posts'}, 'photos': '/api/posts/2/photos', u'id': 2, 'title': u'Title #2', 'body': u'Another thing I wanted to share'}]
</code></p>

<h2 id="api">Ссылочная структура API</h2>

<p>Для нашего API, мы хотим использовать относительно плоскую структуру, что бы попытаться определить типичные сущности для данного API,  но так же и обеспечить некоторые вспомогательные вложенные данные для фильтрации (например, посты определенного пользователя или фотографии определенного поста). Обратите внимание, что мы используем первичные ключи (primary key) моделей в качестве идентификатора, но для пользователей мы используем его имя, так как он так же является уникальным (позже мы увидим это в предствалениях).</p>

<p>``` python
from django.conf.urls import patterns, url, include</p>

<p>from .api import UserList, UserDetail
from .api import PostList, PostDetail, UserPostList
from .api import PhotoList, PhotoDetail, PostPhotoList</p>

<p>user_urls = patterns(‘’,
    url(r’^/(?P<username>[0-9a-zA-Z_-]+)/posts$', UserPostList.as_view(), name='userpost-list'),
    url(r'^/(?P<username>[0-9a-zA-Z_-]+)$', UserDetail.as_view(), name='user-detail'),
    url(r'^$', UserList.as_view(), name='user-list')
)</username></username></p>

<p>post_urls = patterns(‘’,
    url(r’^/(?P<pk>\d+)/photos$', PostPhotoList.as_view(), name='postphoto-list'),
    url(r'^/(?P<pk>\d+)$', PostDetail.as_view(), name='post-detail'),
    url(r'^$', PostList.as_view(), name='post-list')
)</pk></pk></p>

<p>photo_urls = patterns(‘’,
    url(r’^/(?P<pk>\d+)$', PhotoDetail.as_view(), name='photo-detail'),
    url(r'^$', PhotoList.as_view(), name='photo-list')
)</pk></p>

<p>urlpatterns = patterns(‘’,
    url(r’^users’, include(user_urls)),
    url(r’^posts’, include(post_urls)),
    url(r’^photos’, include(photo_urls)),
)
```</p>

<h2 id="api-1">Представления API</h2>

<p>Сильной стороной Django Rest Framework является набор базовых представлений, которые позволяют легко решать распространенные задачи связанные с CRUD практически без изменений. Для простейших представлений, вы предоставляете <code>model</code> и <code>serializer_class</code>, и расширяете одним из встроенных представлений (таким как <code>ListAPIView</code> или <code>RetrieveAPIView</code>).</p>

<p>В нашем случае мы имее пару настроек. Во-первых, для пользователей в качестве поля поиска мы будем использовать поле <code>username</code>, вместо <code>pk</code>. Поэтому мы устанавливаем поле <code>lookup_field</code>.</p>

<p>Мы так же хотели создать вложенные данные представлений для постов пользователей и фотографий поста. Для этого просто переопределим метод представления <code>get_queryset</code> так, что бы он фильтровал результаты по вложенным параметрам (<code>username</code> и <code>pk</code>, соответственно).</p>

<p>``` python
from rest_framework import generics, permissions</p>

<p>from .serializers import UserSerializer, PostSerializer, PhotoSerializer
from .models import User, Post, Photo</p>

<p>class UserList(generics.ListCreateAPIView):
    model = User
    serializer_class = UserSerializer
    permission_classes = [
        permissions.AllowAny
    ]</p>

<p>class UserDetail(generics.RetrieveAPIView):
    model = User
    serializer_class = UserSerializer
    lookup_field = ‘username’</p>

<p>class PostList(generics.ListCreateAPIView):
    model = Post
    serializer_class = PostSerializer
    permission_classes = [
        permissions.AllowAny
    ]</p>

<p>class PostDetail(generics.RetrieveUpdateDestroyAPIView):
    model = Post
    serializer_class = PostSerializer
    permission_classes = [
        permissions.AllowAny
    ]</p>

<p>class UserPostList(generics.ListAPIView):
    model = Post
    serializer_class = PostSerializer</p>

<pre><code>def get_queryset(self):
    queryset = super(UserPostList, self).get_queryset()
    return queryset.filter(author__username=self.kwargs.get('username'))
</code></pre>

<p>class PhotoList(generics.ListCreateAPIView):
    model = Photo
    serializer_class = PhotoSerializer
    permission_classes = [
        permissions.AllowAny
    ]</p>

<p>class PhotoDetail(generics.RetrieveUpdateDestroyAPIView):
    model = Photo
    serializer_class = PhotoSerializer
    permission_classes = [
        permissions.AllowAny
    ]</p>

<p>class PostPhotoList(generics.ListAPIView):
    model = Photo
    serializer_class = PhotoSerializer</p>

<pre><code>def get_queryset(self):
    queryset = super(PostPhotoList, self).get_queryset()
    return queryset.filter(post__pk=self.kwargs.get('pk')) ```
</code></pre>

<h1 id="api-2">Лирическое отступление: встроенный браузер API</h1>

<p>Одним из преимуществ Django Rest Framework является то, что он поставляется со встроенным браузером API для тестирования вашего API. Очень похожий на Django админку, он может помочь в начале разработки.</p>

<p>Просто загрузив одну из ваших API сущностей в браузер, Django Rest Framework предоставит вам удобный клиентсткий интерфейс для взаимодействия с API.</p>

<p><img class="left" src="/images/DRF_Angular/browser_user_posts.png" width="300"> <img class="left" src="/images/DRF_Angular/browser_users.png" width="300"></p>

<h2 id="api-3">Добавление прав доступа и принадлежности в API</h2>

<p>Как написано выше, наши представления API позволяют любому создавать что-либо на нашем сайте. Одним из преимуществ использования Django Rest Framework является наличие типичных представлений, делающих простым управление доступом в представлении без влияния на основную модель и сериализаторы. Что бы включить контроль над тем, кому разрешено редактировать наши API ресурсы, мы можем создать несколько классов, которые обеспечивают управление авторизацией для ограничения доступа. Они должны возвращать логическое значение для каждого запроса. Это дает нам доступ к полному запросу, в том числе куки, аутентифицированного пользователя и многое другое.</p>

<p>``` python
from rest_framework import permissions</p>

<p>class SafeMethodsOnlyPermission(permissions.BasePermission):
    “"”Only can access non-destructive methods (like GET and HEAD)”””
    def has_permission(self, request, view):
        return self.has_object_permission(request, view)</p>

<pre><code>def has_object_permission(self, request, view, obj=None):
    return request.method in permissions.SAFE_METHODS
</code></pre>

<p>class PostAuthorCanEditPermission(SafeMethodsOnlyPermission):
    “"”Allow everyone to list or view, but only the other can modify existing instances”””
    def has_object_permission(self, request, view, obj=None):
        if obj is None:
            # Either a list or a create, so no author
            can_edit = True
        else:
            can_edit = request.user == obj.author
        return can_edit or super(PostAuthorCanEditPermission, self).has_object_permission(request, view, obj)
```</p>

<p>Кроме использования элементарной авторизации, мы также хотим, что бы предварительно заполнялись значения при сохранении в зависимости от того, кто делает запрос. Когда кто-то создает новый пост, мы хотим, что бы он автоматически назначался автором этого поста. Что бы устранить дублирование между <code>PostList</code> и <code>PostDetail</code> мы можем создать миксин, который будет содержать общую конфигурацию.</p>

<p>``` python
class PostMixin(object):
    model = Post
    serializer_class = PostSerializer
    permission_classes = [
        PostAuthorCanEditPermission
    ]</p>

<pre><code>def pre_save(self, obj):
    """Force author to the current user on save"""
    obj.author = self.request.user
    return super(PostMixin, self).pre_save(obj)
</code></pre>

<p>class PostList(PostMixin, generics.ListCreateAPIView):
    pass</p>

<p>class PostDetail(PostMixin, generics.RetrieveUpdateDestroyAPIView):
    pass
```</p>

<h2 id="api--angularjs">Использование API через AngularJS</h2>

<p>С появлением более интерактивных веб-приложений, RESTful API могут быть использованы в сложных клиентских интерфейсах, что бы получать и взаимодействовать с моделью данных приложения. AngularJS может здорово помочь в этом, из-за его сильного разделения элементов управления. Модульная архитектура AngularJS является настраиваемой. Ваше приложение состоит из модулей, которые определяют сервисы, директивы и контроллеры, и таким образом функционал оказывается разложенным по полочкам.</p>

<p>Преимуществом AngularJS является то, что он предоставляет возможность <a href="http://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">реактивного программирования</a> используя свой язык JavaScript-подобных выражений. Мы можем просто определить шаблон, который ссылается на переменные и наша страница будет автоматически обновлена при изменении этих переменных.</p>

<p>Для простейшего примера, мы просто выведем список постов в нашем приложении. Ниже приведен минимальный шаблон для AngularJS. Во-первых, на самом верхнем теге (<code>body</code>) мы укажем, какое приложение Angular используется для запуска этой страницы (<code>example.app.basic</code>), которое мы определим как корневой модуль. Во-вторых, нам нужен специальный контроллер, который будет управлять нашим шаблоном (<code>AppController</code>). Контроллер, в терминологии AbgularJS, больше соответствует связке модели и контроллера в традиционном MVC (c объектом $scope, содержащим состояние модели). Контроллеры определяют области видимости, которые содержат экземпляры модели, и они могут быть вложенными, чтобы ограничить область видимости по мере спускания по дереву DOM. И, наконец, мы используем директиву Angular (<code>ng-repeat</code>), которая является управляющей структурой для перебора наших моделей постов, хранящихся в <code>$state</code>. Внутри блока этой итерации, мы определяем несколько тегов и используем Angular-выражения (похожие на шаблонные теги Django), чтобы вывести имя пользователя автора, заголовок и содержание поста.</p>

<blockquote>
  <p>Используйте тег <code>verbatim</code> для включения Angular-выражений, что бы Django не пытался их отрендерить.</p>
</blockquote>

<blockquote>
  <p>Я заключил некоторые части шаблона в джанговсий тег <code>{% block %}</code>, чтобы потом наследовать этот шаблон для каждого из примеров.</p>
</blockquote>

<p>
``` django
{% load staticfiles %}</p>

<html>
<head>
&lt;link rel="stylesheet" type="text/css" href="{% static "bootstrap/dist/css/bootstrap.css" %}"&gt;
</head>
<body ng-app="{% block ng_app %}example.app.static{% endblock %}">
<div class="content" ng-controller="{% block ng_controller %}AppController{% endblock %}">{% block content %}
{% verbatim %}
    <div class="panel" ng-repeat="post in posts">
        <div class="panel-heading clearfix">
            <h3 class="panel-title">{{ post.title }}</h3>
            <author class="pull-right">{{ post.author.username }}</author>
        </div>
        <p class="well">{{ post.body }}</p>
    </div>
{% endverbatim %}
{% endblock %}</div>
&lt;script src="{% static "underscore/underscore.js" %}"&gt;
&lt;script src="{% static "angular/angular.js" %}"&gt;
&lt;script src="{% static "angular-resource/angular-resource.js" %}"&gt;
&lt;script src="{% static "js/script.js" %}"&gt;
</body>
</html>
<p>```
</p>

<p>Теперь, давайте дополним шаблон простым контроллером, который будет возвращать список постов. Сейчас мы жестко пропишем посты, а потом будем получать их через AJAX.</p>

<p>``` coffeescript
app = angular.module ‘example.app.static’, []</p>

<p>app.controller ‘AppController’, [‘$scope’, ‘$http’, ($scope, $http) -&gt;
    $scope.posts = [
        author:
            username: ‘Joe’
        title: ‘Sample Post #1’
        body: ‘This is the first sample post’
    ,
        author:
            username: ‘Karen’
        title: ‘Sample Post #2’
        body: ‘This is another sample post’
    ]
]
```</p>

<p>Если вы установили все зависимости и запустили <code>grunt</code>, что бы скомпилить CoffeScript в JavaScript, то вы должны увидеть наш шаблон с прописанными в коде данными вроде этого:</p>

<p><img class="center" src="/images/DRF_Angular/example_static.png"></p>

<h2 id="xhr-----api">Используем XHR для получения постов из API</h2>

<p>Теперь, давайте продолжим и обновим контроллер, чтобы получать список постов из нашего API. Сервис <code>$http</code> в AngularJS похож на <code>$.ajax</code> из jQuery или иную реализацию XHR. Обратите внимание, что с AngularJS мы просто обновили нашу модель (<code>$scope.posts</code>) результатом AJAX-запроса и наше представление автоматически обновляется по завершении AJAX-запроса. Нет необходимости изменять DOM. Такой реактивный подход позволяет нам разрабатывать сложные пользовательские интерфейсы с использованием взаимозависимостей данных нашей модели и компонентами пользовательского интерфейса, которые реагируют соответствующим образом без необходимости прямого управления этими связями, что позволяет сделать представления и модель данных слабосвязанными между собой.</p>

<p>``` coffeescript
app = angular.module ‘example.app.basic’, []</p>

<p>app.controller ‘AppController’, [‘$scope’, ‘$http’, ($scope, $http) -&gt;
    $scope.posts = []
    $http.get(‘/api/posts’).then (result) -&gt;
        angular.forEach result.data, (item) -&gt;
            $scope.posts.push item
]
```</p>

<p>С сервисом <code>$http</code>, получающим список постов из нашего API, наша тестовая страница покажет список постов прямо с сервера.</p>

<p><img class="center" src="/images/DRF_Angular/example_basic.png"></p>

<h2 id="angular-resource--api">Используем Angular-Resource для API</h2>

<p>Хотя <code>$http</code> и позволяет с помощью XHR-запросов получать данные API для нашего приложения, это вынуждает нас дублировать код с учетом деталей нашего API, в том числе формирование URL’ов, осуществление запросов и другие вещи, которые можно реализовать на более высоком уровне абстракции. Используйте Angular-Resource, который предоставляет механизм для определения вашего API через сервисы Angular, управляющие большей частью низкоуровневых процессов, тем самым упрощая взаимодействие с API.</p>

<p>Для работы с Angular-Resource (ngResource), вы просто определяете связь между сущностями вашего API и параметрами в шаблоне URL-адреса (так же как и джанговсие urlpatterns). К сожелению, не так уж просто связать Django и определения ngResource, поэтому прицип DRY здесь неприменим.</p>

<p>При определении ваших ресурсов (используя $resource), вы просто предоставляете шаблон URL-адреса, список фигурируемых параметров по умолчанию и, при необходимости, некоторые HTTP методы. В нашем случае, нам нужен ресурс для модели <code>User</code>, который бы связывал имя пользователя (<code>:username</code>) в качестве параметра в URL-запросе и поле <code>username</code> из экземпляра ресурса. Сущности <code>Post</code> и <code>Photo</code> используют поле <code>id</code> экземпляра, т.к. оно является первичным ключом (идентификатором).</p>

<p>``` coffeescript
app = angular.module ‘example.api’, [‘ngResource’]</p>

<p>app.factory ‘User’, [‘$resource’, ($resource) -&gt;
    $resource ‘/api/users/:username’, username: ‘@username’
]</p>

<p>app.factory ‘Post’, [‘$resource’, ($resource) -&gt;
    $resource ‘/api/posts/:id’, id: ‘@id’
]</p>

<p>app.factory ‘Photo’, [‘$resource’, ($resource) -&gt;
    $resource ‘/api/photos/:id’, id: ‘@id’
]
```</p>

<p>Теперь, когда мы определили наш модуль с API, мы можем использовать его в качестве зависимости в нашем модуле контроллера и применить его как сервис, который наш контроллер сможет использовать для доступа к API. Добавим <code>example.api</code> как зависимый модуль и список любых ресурсов API в качестве зависимостей в нашем поределении контроллера. По умолчанию, ваши ресурсы имеют множество основных CRUD методов, включая <code>query()</code> (для получения набора/списка объектов), <code>get()</code> (для получения отдельных объектов), <code>save()</code>, <code>delete()</code> и другие.</p>

<p>``` coffeescript
app = angular.module ‘example.app.resource’, [‘example.api’]</p>

<p>app.controller ‘AppController’, [‘$scope’, ‘Post’, ($scope, Post) -&gt;
    $scope.posts = Post.query()
]
```</p>

<p>В результате получим такой же список постов, как и в примере выше.</p>

<p><img class="center" src="/images/DRF_Angular/example_resource.png"></p>

<h2 id="section-2">Добавляем фотографии в список постов</h2>

<p>Теперь у нас есть список постов, показываемый с помощью вызовов ngResource API, но мы выполняем только получение данных. В реальных приложениях, ваши данные редко хранятся лишь в одной сущности API и может потребоваться несколько скоординированных запросов для построения актуальных данных модели. Давайте улучшим наше приложения, чтобы получать также фоторгафии каждого поста и выводить их.</p>

<p>Сначала давайте добавим два дополнительных ресурсы для вложенных вызовов API:</p>

<p>``` coffeescript
app.factory ‘UserPost’, [‘$resource’, ($resource) -&gt;
    $resource ‘/api/users/:username/posts/:id’
]</p>

<p>app.factory ‘PostPhoto’, [‘$resource’, ($resource) -&gt;
    $resource ‘/api/posts/:post_id/photos/:id’
]
```</p>

<p>Это создаст два дополнительных сервиса (<code>UserPost</code> и <code>UserPhoto</code>) которые мы можем использовать для получения ресурсов связанных с определенным пользователем и определенным постом соответственно. Так как это вложенные ресурсы, нам нужно что бы они загружались после основного ресурса (другой вариант заключается в использовании механизма <code>$watch</code> в Angular в ответ на изменения и выполнять дополнительные запросы к API). Для этого мы будем использовать сервис <code>$q</code> в Angular, который обеспечивает обещано-отложенную реализацию, позволяющую создавать цепочки вызовов. Начиная с версии 1.1 ngResource предоставляет аттрибут $promise, который вы можете применить для создания цепочки вызовов. Мы используем этот интерфейс, что бы после запроса к API следовало получение фотографий для полученного поста.</p>

<p>У вас есть несколько вариантов, как работать с вложенными ресурсами. Для этого случая, мы просто создадим еще один контейнер в <code>$scope</code> для фотографий и используем <code>post_id</code> в качестве идентификатора. Выражения в Angular и в его языке шаблонов игорируют отсутствующие ключи, поэтому мы просто проитерируем <code>photos[post.id]</code> чтобы получить фотографии в шаблоне. Обратите внимание, что нам не нужно что-либо делать, чтобы обновить представление или шаблон. Ангуляровский процесс <code>$digest</code> самостоятельно обноруживает обновления.</p>

<p>``` coffeescript
app = angular.module ‘example.app.photos’, [‘example.api’]</p>

<p>app.controller ‘AppController’, [‘$scope’, ‘Post’, ‘PostPhoto’, ($scope, Post, PostPhoto) -&gt;
    $scope.photos = {}
    $scope.posts = Post.query()
    $scope.posts.$promise.then (results) -&gt;
        # Load the photos
        angular.forEach results, (post) -&gt;
            $scope.photos[post.id] = PostPhoto.query(post_id: post.id)
]
```</p>

<p>Также обновим наш шаблон чтобы итерировать каждую модель поста для отображения фотографий каждого поста. Обратите внимание, как AngularJS повторно обновляет представление по мере того, как данные загружаются из API. В этом случае, мы итерируем фотографии объекта, ссылающиеся на идентификаторы постов, которые в свою очередь итерируются директивой <code>ng-repeat</code>. Мы также используем директиву <code>ng-src</code> вместо аттрибута <code>src</code>, так как это не позволяет браузеру загружать картинку до того как выражение Angular было прекомпилировано (тогда бы вы увидели ошибку 404 в ваших логах о невозможности показа ’/media/{{ photo.image }}’).</p>

<p>
<code>html
&lt;div class="panel" ng-repeat="post in posts"&gt;
    &lt;div class="panel-heading clearfix"&gt;
        &lt;h3 class="pull-left panel-title"&gt;{{ post.title }}&lt;/h3&gt;
        &lt;author class="pull-right"&gt;{{ post.author.username }}&lt;/author&gt;
    &lt;/div&gt;
    &lt;p class="well"&gt;{{ post.body }}&lt;/p&gt;
    &lt;span class="photo" ng-repeat="photo in photos[post.id]"&gt;
        &lt;img class="img-thumbnail" ng-src="{{ photo.image }}"&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code>
</p>

<p>И в итоге, обновив страницу <a href="http://localhost:8000/photos">http://localhost:8000/photos</a>, получим отрендеренные фотографии:</p>

<p><img class="center" src="/images/DRF_Angular/example_photos.png"></p>

<h2 id="angularjs----csrf">Лирическое отступление: AngularJS и защита от CSRF</h2>

<p>Django Rest Framework расширяет джанговскую защиту от <a href="http://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%B4%D0%B4%D0%B5%D0%BB%D0%BA%D0%B0_%D0%BC%D0%B5%D0%B6%D1%81%D0%B0%D0%B9%D1%82%D0%BE%D0%B2%D1%8B%D1%85_%D0%B7%D0%B0%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2">CSRF</a> (Cross Site Request Forgery) используя класс <code>SessionAuthentication</code> (как например в нашем случае: используется таже сессия браузера, что и для веб-приложения). Это способствует тому, что вредоносные сценарии не смогут использовать наших пользователей для выполнения различных запросов к нашему API, заставляя сценарии при каждом запросе отправлять генерируемый сервером токен. Модульная архитектура AngularJS и внедрение зависимостей позволяет сделать это простым конфигурированием запросов к API с помощью включения CSRF-токена в заголовок запроса (по желанию, можно также использовать куки).</p>

<p>В нашем джанговском шаблоне, просто добавьте тег <code>&lt;script&gt;</code> для конфигурирования сервиса <code>$http</code> и настройте джанговское приложение, что бы шаблонная переменная <code>{{ csrf_token }}</code> передавалась в заголовок ответа для всех вызовов API.</p>

<blockquote>
  <p>Будьте уверены, что этот скрипт загружается <strong>после</strong> определений модуля.</p>
</blockquote>

<blockquote>
  <p>Вы можете передавать CSRF токен между Angular и Django через куки или другим способом. Этот явный механизм с использованием заголовков просто обеспечивает генерацию CSRF токена при каждом запросе.</p>
</blockquote>

<p>
<code>html
&lt;script&gt;
// Add the CSRF Token
var app = angular.module('example.app'); // Not including a list of dependent modules (2nd parameter to `module`) "re-opens" the module for additional configuration
app.config(['$httpProvider', function($httpProvider) {
    $httpProvider.defaults.headers.common['X-CSRFToken'] = '{{ csrf_token|escapejs }}';
}]);
&lt;/script&gt;
</code>
</p>

<h2 id="api---angularjs">Создание и модификация ресурсов API с использованием AngularJS</h2>

<p>Теперь давайте сделаем редактор в нашем представлении ленты для публикации новых постов (такой как обновление статуса в Фейсбуке). Хотя большинство руководств по Angular просто добавляют функциональность к уже существующему контроллеру, я хочу показать как сохранить ваши контроллеры компактными и модульными, поэтому для этого редактора постов мы сделаем отдельный контроллер и покажем, как контроллеры используют вложенные области видимости для расширения функциональности. Это также дает возможность расширить существующий можуль <code>example.app.photos</code>, реализующий основной контроллер <code>AppController</code> для ленты постов.</p>

<p>Сперва, нам нужно расшарить наш базовый шаблон, и добавить html шаблон для редактора. Мы также добавим CSRF токен, согласно приведенным выше инструкциям, так как для создания новых постов будут использоваться потенциально уязвимые методы.</p>

<p>
``` django
{% extends ‘base.html’ %}</p>

<p>{% block ng_app %}example.app.editor{% endblock %}</p>

<p>{% block content %}
{% verbatim %}
&lt;div ng-controller="EditController"&gt;
    &lt;h5&gt;Create a New Post&lt;/h5&gt;
    &lt;form class="form-inline"&gt;
        &lt;div class="form-group block-level"&gt;
            <input type="text" class="form-control" ng-model="newPost.title" placeholder="Title" />
        &lt;/div&gt;
        &lt;div class="form-group"&gt;
            <input type="text" class="form-control" ng-model="newPost.body" placeholder="Body" />
        &lt;/div&gt;
        &lt;div class="form-group"&gt;
            &lt;button class="btn btn-default" ng-click="save()"&gt;Add Post&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/div&gt;
{% endverbatim %}
{{ block.super }}
{% endblock %}</p>

<p>{% block js %}
{{ block.super }}
<script>
// Add the CSRF Token
var app = angular.module('example.app.editor'); // Not including a list of dependent modules (2nd parameter to `module`) "re-opens" the module for additional configuration
app.config(['$httpProvider', function($httpProvider) {
    $httpProvider.defaults.headers.common['X-CSRFToken'] = '{{ csrf_token|escapejs }}';
}]);
</script>
{% endblock %}
```
</p>

<p>Теперь, у нас есть редактор - давайте сделаем контроллер для его подключения. Заметьте, что теперь у нас в зависимостях два модуля: базовый модуль нашей ленты постов и модуль API, содержащий все определения ресурсов API (<code>$resource</code>).</p>

<p>``` coffeescript
app = angular.module ‘example.app.editor’, [‘example.api’, ‘example.app.photos’]</p>

<p>app.controller ‘EditController’, [‘$scope’, ‘Post’, ($scope, Post) -&gt;</p>

<pre><code>$scope.newPost = new Post()
$scope.save = -&gt;
    $scope.newPost.$save().then (result) -&gt;
        $scope.posts.push result
    .then -&gt;
        # Reset our editor to a new blank post
        $scope.newPost = new Post() ] ```
</code></pre>

<p>Ранее, в представлениях API, мы добавляли некоторые ограничения прав доступа, чтобы предотвратить изменения пользователями чужих постов. До сих пор это не имело значения, какое отношение имеет пользователь к редактируемому посту. Но теперь, когда мы хотим создать пользователей, мы должны гарантировать, что обрабатываем запрос от пользователя, который имеет право на этот запрос (иначе, запрос на создание нового поста должен быть отклонен). В этом учебном примере, мы использовали хак аутентификации Django, который автоматически авторизует вас как пользователя <code>root</code>. Разумеется, в продакшене или ином недоверенном окружении так делать нельзя. Это сделано для упрощения демонстрации тестового приложения, игнорируя регистрацию и авторизацию пользователя.</p>

<p><img class="center" src="/images/DRF_Angular/example_editor.png"></p>

<h2 id="section-3">Обработка ошибок</h2>

<p>Если вы тестировали получившееся приложение, пробовали ли вы создать пост без заголовка? Мы определили обязательные поля в модели Django, и Django Rest Framework будет проверять их наличие при создании нового поста. Если вы попытаетесь создать пост без заголовка (например, с помощью браузерного API или наше новой формы), вы получите 400-ю ошибку, с описанием причин ошибочности запроса. Давайте использовать этот ответ для информировнаия пользователя.</p>

<p><code>json
{
    "title": [
        "This field is required."
    ]
}
</code></p>

<p>Для информирования пользователя, давайте изменим вызов API. Так как мы используем <code>Promises</code>, мы можем просто добавить коллбек-функцию, вызываемую при ошибке, чтобы получить информацию в ответе и уведомить пользователя, передав ответ в <code>$scope</code>, откуда шаблон сможет вывести ошибку для показа пользователю.</p>

<p>``` coffeescript
app = angular.module ‘example.app.editor’, [‘example.api’, ‘example.app.photos’]</p>

<p>app.controller ‘EditController’, [‘$scope’, ‘Post’, ($scope, Post) -&gt;</p>

<pre><code>$scope.newPost = new Post()
$scope.save = -&gt;
    $scope.newPost.$save().then (result) -&gt;
        $scope.posts.push result
    .then -&gt;
        # Reset our editor to a new blank post
        $scope.newPost = new Post()
    .then -&gt;
        # Clear any errors
        $scope.errors = null
    , (rejection) -&gt;
        $scope.errors = rejection.data ] ```
</code></pre>

<p>Также обновим шаблон, для вывода информации об ошибках:</p>

<p>
<code>html
&lt;p ng-repeat="(name, errs) in errors" class="alert alert-danger"&gt;&lt;strong&gt;{{ name }}&lt;/strong&gt;: {{ errs.join(', ') }}&lt;/p&gt;
</code>
</p>

<p>Подобным образом довольно просто к элементам пользовательского интерфейса добавить получение обратной связи о прогрессе (индиваторы загрузки, прогресс-бары) используя цепочечные вызовы. В AngularJS есть достаточно полная обработка ошибок через цепочки вызовов, делающая обработку ошибок простой.</p>

<p>В этом демонстрационном примере, мы просто перечислили ошибки и вывели их в специально оформленных элементах интерфейса. Так как ошибки имеют привязку к имени аттрибута, вы легко можете показать список ошибок возле того элемента формы, которому они соответсвуют.</p>

<p><img class="center" src="/images/DRF_Angular/example_error.png"></p>

<h2 id="section-4">Удаление своих постов</h2>

<p>Чтобы редактор был полным, нам нужен способ удалять любые посты, но только те, которые добавлены текущим пользователем. У нас уже есть API, которое предотвращает попытки удаления/изменения ресурсов пользователями, которые не владеют ими. Если вы только начали изучать AngularJS, то вам сложно понять, как с помощью его модульной архитектуры обеспечить наличие начальных данных в контроллере. В нашем случае, зная текущего пользователя, можно определить какие посты доступны ему для удаления.</p>

<p>Ключ к пониманию этого заключается в попытке разложить функционал контроллеров на несколько служб, выполняющих определенную часть логики. Контроллер (тоже, что и представление в Django) должны только обеспечить слаженную работу различных компонентов. В Django, вы пытаетесь разместить как можно боьше бизнес-логики в модели (паттерн “толстые модели”). В AngularJS, вы похожим образом распределяете бизнес-логику в компонуемых службах.</p>

<p>Чтобы добавить возможность удалять посты, давайте сначала добавим модуль, расширяющий наш редактор, и добавим дополнительный контроллер для обрабтки удаления. В зависимостях нового контроллера будет служба <code>AuthUser</code>, которая через джанговский шаблон будет предоставлять текущего пользователя. В этом случае, служба будет содержать один аттрибут <code>username</code>, в котором будет имя текущего пользователя (или пустая строка, если пользователя нет). Мы добавили две функции в область видимости нового контроллера: <code>canDelete</code>, чтобы определить может ли текущий пользователь удалить пост, и <code>delete</code>, чтобы удалять пост. Обе функции принимают аргумент <code>post</code>, который передается туда через шаблон.</p>

<p>Опять же, мы использовали цепочечный вызов службы <code>$resource</code>, и только успешного подтверждения со стороны сервера об удалении поста, мы обновляем список постов. Так же как и было указано выше, есть возможность обработки ошибок выполнения запроса и обеспечения обратной связи с пользователем, но в нашем простом примере мы это пропустим.</p>

<p>``` coffeescript
app = angular.module ‘example.app.manage’, [‘example.api’, ‘example.app.editor’]</p>

<p>app.controller ‘DeleteController’, [‘$scope’, ‘AuthUser’, ($scope, AuthUser) -&gt;
    $scope.canDelete = (post) -&gt;
        return post.author.username == AuthUser.username</p>

<pre><code>$scope.delete = (post) -&gt;
    post.$delete()
    .then -&gt;
        # Remove it from the list on success
        idx = $scope.posts.indexOf(post)
        $scope.posts.splice(idx, 1) ] ```
</code></pre>

<p>После определения контроллера, давайте обновим наш шаблон поста и добавим кнопку удаления (при условии, что функция <code>canDelete</code> возвращает <code>true</code>).</p>

<p>
``` django
{% extends ‘editor.html’ %}</p>

<p>{% block ng_app %}example.app.manage{% endblock %}</p>

<p>{% block post_header %}</p>

<p>&lt;button type="button" class="close" ng-controller="DeleteController" ng-click="delete(post)" ng-show="canDelete(post)"&gt;×&lt;/button&gt;
{{ block.super }}
{% endblock %}</p>

<p>{% block js %}
{{ block.super }}
<script>
// Configure the current user
var app = angular.module('example.app.manage'); // Not including a list of dependent modules (2nd parameter to `module`) "re-opens" the module for </script></p>

<p>app.factory(‘AuthUser’, function() {
    return {
        username: “{{ user.username|default:’‘|escapejs }}”
    }
});
&lt;/script&gt;
{% endblock %}
```
</p>

<p>И когда вы загрузите <a href="http://localhost:8000/manage">http://localhost:8000/manage</a>, возле постов с автором <code>root</code> будет кнопка <strong>‘X’</strong>, а возле поста с автором <code>bob</code> - не будет. При нажатии на кнопку <strong>‘X’</strong> наш API удалит пост.</p>

<p><img class="center" src="/images/DRF_Angular/example_managed.png"></p>

<p>Итак, у нас есть простая лента, в которой пользователи могут размещать посты.</p>

<h2 id="section-5">Заключение</h2>

<p>Хорошо, давайте подумаем. Небольшим количеством кода (примерно 100 строк в интерфейсной части, и 200 строк в серверной), используя Django Rest Framework (ну и Django) и AngularJS, мы смогли быстро написать пример приложения для простой публикации постов. Django Rest Framework позволяет легко экспортировать данные наших джанговских моделей через RESTful API с возможностью настройки выводных данных в зависимости от наших нужд. AngularJS облегчает получение данных и взаимодейтсвие с API, причем делает это модульно и структурированно, что помогает нам добавлять новый функционал для наших приложений без спагетти-кода.</p>

<p>Весь код, упоминавшийся в этой статье, доступен на <a href="https://github.com/kevinastone/django-api-rest-and-angular">гитхабе</a>. Я советую скачать этот репозиторий и установить рабочую копию проекта для экспериментов. Если заметите какие-либо ошибки - поставьте таск в гитхабе (или даже пулл-реквест). Если есть какие-либо вопросы - оставьте комментарий (или стукнитесь в твиттер <a href="https://twitter.com/kevinastone">@kevinastone</a>). Я планируюю дополнить эту статью дополнительными случаями, с которыми мне приходилось сталкиваться, а именно:</p>

<ul>
  <li>пагинация</li>
  <li>API переключатели (типа подписаться/отписаться)</li>
  <li>более сложные права доступа</li>
  <li>расширенная валидация</li>
  <li>тестирование</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Руководство: Используем AngularJS с Django]]></title>
    <link href="http://toly.github.io/blog/2014/03/08/tutorial-using-angularjs-with-django/"/>
    <updated>2014-03-08T20:04:27+04:00</updated>
    <id>http://toly.github.io/blog/2014/03/08/tutorial-using-angularjs-with-django</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Перевод статьи Глена Джексона <a href="http://glynjackson.org/weblog/entry/django-angular.html">Tutorial: Using AngularJS with Django</a></p>
</blockquote>

<p>~~Я надеялся написать быстрое руководство, что бы вы начали использовать Angular с Django~~ которое становилось руководством по поглощению Red Bull. Мои извинения, если оно получится небрежным к концу!</p>

<p>Почитав посты на тему совместного использования Django и AngularJS, я чувтсвовал, что большинство из них были “велосипедными”. Хотя пример кода, который здесь приводится, сырой, он должен показать, как я использую их в проектах.</p>

<!-- more -->

<h2 id="section">Модели</h2>

<p>Давайте начнем с типичной модели</p>

<p><code>python /jobs/models.py
class Job(models.Model):
    name = models.CharField(max_length=50)
    description = models.TextField(null=True, blank=True)
</code></p>

<p>Ок, пока ничего особенного. Все что вы сделали - это создали простую модель, которая содержит основные сведения о работе.</p>

<h2 id="rest-api-tastypie">REST API (Tastypie)</h2>

<p>AngularJS построен так, что бы использовать веб-сервисы, поэтому вам нужен способ плучать данные только что созданной модели <code>Job</code>.</p>

<p>Для Django есть хороший выбор вариантов для создания RESTful API. <em>TastyPie</em> является отличным REST фреймворком для Django. Он невероятно мощный, но простой в установке и использовании. Однако, по-моему, таких же результатов можно добиться используя <em>Django REST framework</em>, или даже самостоятельно создав ответы на запросы API средствами Django. Выбор остается за вами. В этом уроке мы будем использовать <em>TastyPie</em>.</p>

<p>Если вам не знаком <em>TastyPie</em>, ознакомьтесь с <a href="http://django-tastypie.readthedocs.org/en/latest/">документацией</a>. Я не буду вдаваться в подробности относительно установки. И предполагаю, он уже установлен, добавлен в <code>INSTALLED_APPS</code> и вы готовы продолжить.</p>

<p>Сперва, вам нужно создать ресурс для модели <code>Job</code>. <em>TastyPie</em> использует понятие <em>ресурс</em>. Это описывается как посредник между конечным пользователем и объектом (в данном случае это будет модель <code>Job</code>).</p>

<p>Начните с создания соответствующего ресурса для модели <code>Job</code>:</p>

<p>``` python
from tastypie.resources import ModelResource
from tastypie.authentication import Authentication
from tastypie.authorization import Authorization
from .models import Job</p>

<p>class JobResource(ModelResource):
    “””
    API Facet
    “””
    class Meta:
        queryset = Job.objects.all()
        resource_name = ‘job’
        allowed_methods = [‘post’, ‘get’, ‘patch’, ‘delete’]
        authentication = Authentication()
        authorization = Authorization()
        always_return_data = True
```</p>

<p>Насколько я помню, документация TastyPie предлагает назвать файл ресурсов как <em>api.py</em>. Так же предлагаю и я, но это не обязательно. Вы можете назвать этот файл как угодно, но это хорошо для сохранения постоянства.</p>

<p>Есть несколько вещей, происходящих в <code>JobResource</code>, которые выходят за рамки данного руковосдства. Но, я просто хотел бы обратить внимание на то, как <code>JobResource</code> наследует <code>ModelResource</code>. Вы используете TastyPie с ORM Django (модель <code>Job</code>). Другими словами, многие из основных API ORM вым доступны.</p>

<p>TastyPie так же может обрабатывать данные и без ORM. Расширяя и наследуя ресурс, вы так же можете получить все вкусности TastyPie для API которое захотите предложить, но без привязки к ORM. Это особенно полезно при совершении запросов, не поддерживающих ORM, NoSQL баз как описано в документации.</p>

<p>Пока что вы создали модель данных (<code>Job</code>) и способ взаимодействия с нею (<code>JobResource</code>). Далее, вам нужен способ подключения к ресурсу через определеный URL, что в конечном итоге позволит AnagularJS его использовать. В Django вы можете сделать это используя URL роутер. Просто подключите экземпляр ресурса к определенному URL:</p>

<p>``` python
from tastypie.api import Api
from .apps.your_app.api import JobResource</p>

<p>v1_api = Api(api_name=’v1’)
v1_api.register(JobResource())</p>

<p>urlpatterns = patterns(‘’,</p>

<pre><code> (r'^api/', include(v1_api.urls)), ) ```
</code></pre>

<p>Аттрибут <code>resource_name</code>, определенный в <code>JobResource</code> - это название ресурса в URL. По нему вы знаете где находится работающее API для ресурса <code>JobResource</code>. Проверьте что все это работает, запустив локальный сервер и посетив адрес <a href="http://127.0.0.1:8000/api/v1/job/?format=json">http://127.0.0.1:8000/api/v1/job/?format=json</a></p>

<p>Теперь у вас есть рабочее API для вашей модели <code>Job</code>. Просто.</p>

<h2 id="section-1">Формы</h2>

<p>Перед тем как начать использовать AngularJS нам нужно сделать форму для <code>Job</code> с использованием Django. Позже, эта форма позволит вам редактировать данные модели <code>Job</code> в одностраничном приложении. Я знаю о чем вы думаете: “Почему в Django”?</p>

<p>Одним из приципов в Django является прицип “на повторяйся” (DRY). Так что не имеет смысла создавать формы с помощью HTML для AngularJS, а затем делать то же для Django. К тому же Django хорошо справляется с соданием форм. Возможно у вас есть несколько форм, которые нужно преобразовать, так почему бы не сделать это автоматическим? Посмотрите в сторону <a href="http://django-angular.readthedocs.org/en/latest/">django-angular</a>. Это один классный пакет, познакомившись с которым вы будете рады (я знаю о чем говорю).</p>

<blockquote>
  <p><em>django-angular</em> - это набор утилит, которые помогают упростить интеграцию Django и AngularJS с помощью повторно используемых компонентов</p>
</blockquote>

<p>Опять же, здесь я не буду вдаваться в подробности относительно установки и настройки. Я предлагаю вам ознакомиться с документацией и начать использовать django-angular прямо сейчас! Достаточно сказать, что один из его многочисленных компонентов позволит вам использовать формы Django для валидации в AngularJS. Объединив его с пакетом <code>crispy forms</code> вы получите мощное решение “все-в-одном” - вот за что я люблю Django и его сообщество.</p>

<p>``` python
from django import forms
from djangular.forms import NgFormValidationMixin, NgModelFormMixin, AddPlaceholderFormMixin
from crispy_forms.helper import FormHelper</p>

<p>from .models import Job</p>

<p>class JobForm(NgModelFormMixin, forms.ModelForm):
    “””
    Job Form with a little crispy forms added!
    “””
    def <strong>init</strong>(self, <em>args, **kwargs):
        super(JobForm, self).<strong>init</strong>(</em>args, **kwargs)
        setup_bootstrap_helpers(self)</p>

<pre><code>class Meta:
    model = Job
    fields = ('name', 'description',)
</code></pre>

<p>def setup_bootstrap_helpers(object):
    object.helper = FormHelper()
    object.helper.form_class = ‘form-horizontal’
    object.helper.label_class = ‘col-lg-3’
    object.helper.field_class = ‘col-lg-8’
```</p>

<h2 id="angularjs">AngularJS</h2>

<p>Для простоты сделайте 3 новых шаблона, расположенных так:</p>

<p><code>
    templates
        jobs/index.html
        jobs/new.html
    base.html
</code></p>

<p>Это предполагает, что приложение <code>jobs</code> установлено и настроено. Базовый шаблон будет выглядеть примерно так:</p>

<p></p>

<p>``` django /jobs/base.html
&lt;!DOCTYPE html&gt;</p>
<html>
<head>
    <meta charset="utf-8" />
    <link href="http://toly.github.io//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.0.2/css/bootstrap.min.css" rel="stylesheet" />

    <script src="http://toly.github.io//ajax.googleapis.com/ajax/libs/angularjs/1.2.7/angular.js"></script>
    <script src="http://toly.github.io/angular-ui-router.min.js"></script>
    <script type="text/javascript" src="http://cdn.jsdelivr.net/restangular/latest/restangular.js"></script>

</head>
<body>
    {% block content %}{% endblock content %}
    {% block extra_javascript %}{% endblock extra_javascript %}
</body>
</html>
<p>```</p>

<p></p>

<p>Django-angular предлагает полезные шаблонные теги, которые включат необходимый для вас JavaScript. Я рекомендую использовать CDN и загрузить туда файлы, какие можно. Это дает географические и пропускные преимущества.</p>

<p>Теперь создадим шаблон страницы, который будет рендерится нашим проектом. <em>index.html</em> будет служить главной страницей нашего одностраничного приложения, и позже может быть использован для всех CRUD (Create Read Update Delete) представлений.</p>

<p></p>

<p><code>django /jobs/index.html
{% extends "base.html" %}
{% load i18n %}
{% block content %}
&lt;div class="container content" ng-app="JobApp"&gt;
    &lt;div ui-view &gt;Loading...&lt;/div&gt;
&lt;/div&gt;
{% endblock content %}
{% block extra_javascript %}
&lt;script src="{{ STATIC_URL }}/javascript/app.js"&gt;&lt;/script&gt;
{% endblock extra_javascript %}
</code></p>

<p></p>

<p></p>

<p>``` javascript /javascript/app.js
var app = angular.module(‘JobApp’, [
    ‘ui.router’,
    ‘restangular’
])</p>

<p>app.config(function ($stateProvider, $urlRouterProvider, RestangularProvider) {
    // For any unmatched url, send to /route1
    $urlRouterProvider.otherwise(“/”);
    $stateProvider
        .state(‘index’, {</p>

<pre><code>        url: "/",
        templateUrl: "/static/html/partials/_job_list.html",
        controller: "JobList"
    })

   .state('new', {

        url: "/new",
        templateUrl: "/jobs/job-form",
        controller: "JobFormCtrl"
    }) })
</code></pre>

<p>app.controller(“JobFormCtrl”, [‘$scope’, ‘Restangular’, ‘CbgenRestangular’, ‘$q’,
function ($scope, Restangular, CbgenRestangular, $q) {</p>

<p>}])// end controller
```</p>

<p></p>

<p>Шаблон и JS код выше очень простые, наследуется от базового шаблона. Есть несколько аттрибутов, которые вы возможно не видели прежде и в которых нужно будет разобраться.</p>

<p>Первый из них: <code>ng-app="JobApp"</code>. Без этого тега процесс AngularJS не запустится. Эта директива говорит фреймворку AngularJS какой элемент является корневым в приложении. Все, что вы добавите внутрь этого элемента будет частью шаблона под управлением AngularJS.</p>

<p>Далее, посмотрите на скрипт, который вы включили в <code>index.html</code>. Это скрипт <code>app.js</code>, который является модулем AngularJS. Модуль AngularJS представляет собой набор функций, которые выполняются когда приложение загружено.</p>

<p><code>javascript
var app = angular.module('JobApp', [
</code></p>

<p>Строка, расположенная выше, создает модуль <code>JobApp</code>. В index.html вы уже создали его экземпляр с помощью директивы <code>ng-app="JobApp"</code>. Основное, что здесь делается: сообщается AngularJS, что модуль <code>app.js</code> управляет содержимым этого тега.</p>

<p>Фактически, вы можете установить аттрибут <code>ng-app</code> для любого элемента в DOM. Например, если вы хотите, что бы часть шаблона не управлялась через Angular, вы можете сделать так:</p>

<p>``` html</p>
<h2>I am not inside an AngularJS app</h2>
<div ng-app="embeddedApp">
  <h3>Inside an AngularJS app</h3>
</div>
<p>```</p>

<p><code>app.config</code> в app.js также показывает начало вашей URL-маршрутизации. AngularJS поддерживает URL-маршрутизацию по умолчанию через сервис <code>$route</code> в ядре Angular, но этого недостаточно и это имеет некоторые ограничения.</p>

<p>Один из модулей, которые вы включили, это AngularUI роутер <code>ui.route</code>. AngularUI роутер - это дополнительный модуль URL-маршрутизации для Angular, организованный в контексте состояний, которые опционально могуть иметь прикрепленные реакции на определенные URL’ы.</p>

<p>В этом руководстве предусмотрено одно состояние, которое назыаается <code>new</code>, но вы можете определять много различных состояний для вашего приложения. Вы даже можете добавить поведение для того случая, когда ни одного состояния не обнаружено:</p>

<p>``` javascript
$urlRouterProvider.otherwise(“/”);
$stateProvider
   .state(‘index’, {</p>

<pre><code>   url: "/",
   templateUrl: "static/html/somepage.html",
   controller: "SomeController"    }) ```
</code></pre>

<p>Если вы не знакомы с этим, то я предлагаю почитать о <a href="https://github.com/angular-ui/ui-router">AngularUI Router</a> после того как закончите с этим руководством.</p>

<p>Последний элемент в index.html, с которым вам нужно разобраться - это <code>ui-view</code>. Это тоже относится к AngularUI Router. Директива <code>ui-view</code> определяет куда разместь ваш шаблон.</p>

<p>Последний шаблон, который нужно создать - <em>/jobs/new.html</em>. Он будет содержать простую форму, которую вы сделали ранее с использованием django-angular.</p>

<p>
<code>django /jobs/new.html
{% load crispy_forms_tags %}
{% crispy JobForm %}
&lt;button type="button" class="btn btn-default"  ng-click="submitJob()"&gt;Create&lt;/button&gt;
</code>
</p>

<p>Теперь вам нужно всего лишь представление и URL для подключения формы.</p>

<p>``` python /jobs/views.py
from .forms import JobForm</p>

<p>class JobFormView(TemplateView):
    template_name = “jobs/new.html”</p>

<pre><code>def get_context_data(self, **kwargs):
    context = super(JobFormView, self).get_context_data(**kwargs)
    context.update(JobForm=JobForm())
    return context
</code></pre>

<p>class IndexView(TemplateView):
    template_name = ‘jobs/index.html’
```</p>

<p>``` python /jobs/urls.py
from django.conf.urls import url
from django.conf.urls import patterns</p>

<p>from .views import JobFormView, IndexView</p>

<p>urlpatterns = patterns(‘’,</p>

<pre><code>url(r'^job-form/$', login_required(JobFormView.as_view()), name='job_form'),
url(r'^/$', IndexView.as_view(), name='index_job'),
</code></pre>

<p>)
```
Теперь отправьте ваш браузер по адресу <a href="http://127.0.0.1:8000/job/#new">http://127.0.0.1:8000/job/#new</a> и вы должны увидеть форму для добавления работы в вашем новом одностраничном приложении.</p>

<p>Последний шаг - сделать возможным отправку POST-данных при нажатии на кнопку с <code>ng-click="submitJob()"</code>. Измените контроллер как показано ниже, используя <a href="https://github.com/mgonto/restangular">restangular</a>.</p>

<blockquote>
  <p>RestAngular - это модуль для AngularJS упрощает работу с GET, DELETE и UPDATE запросами, используя минимум клентского кода. Он идеально подходит для любого веб приложения, которое получает данные через REST API.</p>
</blockquote>

<p>``` javascript
app.controller(“JobFormCtrl”, [‘$scope’, ‘Restangular’, ‘CbgenRestangular’, ‘$q’,
function ($scope, Restangular, CbgenRestangular, $q) {</p>

<pre><code>$scope.submitJob = function () {
var post_update_data = create_resource($scope, CbgenRestangular);
    $q.when(post_update_data.then(
        function (object) {
            // success!
        },
    
        function (object){
            // error!
            console.log(object.data)
        }
    
    ))
}
</code></pre>

<p>}])// end controller</p>

<p>app.factory(‘CbgenRestangular’, function (Restangular) {
    return Restangular.withConfig(function (RestangularConfigurer) {
        RestangularConfigurer.setBaseUrl(‘/api/v1’);
    });
})</p>

<p>populate_scope_values = function ($scope) {
    return {name: $scope.name, description: $scope.description };
},</p>

<p>create_resource = function ($scope, CbgenRestangular) {
var post_data = populate_scope_values($scope)
    return CbgenRestangular.all(‘job/’).post(post_data)
}
```</p>

<h2 id="section-2">Что дальше</h2>

<p>Материала слишком много для одного поста в блоге. Дальше - практиковаться и изучать <a href="https://egghead.io/lessons">видео уроки по AngularJS</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Передовые паттерны проектирования в Python]]></title>
    <link href="http://toly.github.io/blog/2014/03/05/advanced-design-patterns-in-python/"/>
    <updated>2014-03-05T19:56:33+04:00</updated>
    <id>http://toly.github.io/blog/2014/03/05/advanced-design-patterns-in-python</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Перевод статьи <a href="http://pypix.com/python/advanced-data-structures/">Advanced Design Patterns in Python</a></p>
</blockquote>

<p>Цель данной статьи - показать передовые паттерны в Python и лучший способ их использовать. В зависимости от того, что вам нужно от структуры кода, будь то быстрый поиск, постоянство, индексация и т.д., вы можете выбрать оптимальную структуру для работы, и большую часть времени вы будете смешивать их вместе что бы получить логичную и простую для понимания модель данных. Паттерны в Python очень интуитивны с точки зрения синтаксиса и они предлагают большой выбор операций. Это руководство пытается собрать наиболее распространенную и полезную информацию о каждом паттерне, а так же советы о том когда лучше всего использовать тот или иной паттерн.</p>

<!-- more -->

<h2 id="section">Генераторы</h2>

<p>Если вы очень долго используете Python, скорее всего вы слышали о генераторах списков. Они подходят для цикла, блока <strong>if</strong> и способны уместить  все это в одну строку. Другими словами, вы можете отобразить (<strong>map</strong>) и отфильтровать (<strong>filter</strong>) список одним выражением.</p>

<p>Генератор списка состоит из следующих частей:</p>

<ul>
  <li>входная последовательность</li>
  <li>переменная, представляющая элементы входной последовательности</li>
  <li>условие (опционально)</li>
  <li>выходное выражение, полученное из элементов входного списка, которые удовлетворяют условию</li>
</ul>

<p>Допустим, нам нужно получить список всех квадратов целых чисел, которые больше нуля:</p>

<p>``` python
num = [1, 4, -5, 10, -7, 2, 3, -1]
filtered_and_squared = []</p>

<p>for number in num:
    if number &gt; 0:
        filtered_and_squared.append(number ** 2)
print filtered_and_squared</p>

<h1 id="section-1">[1, 16, 100, 4, 9]</h1>
<p>```</p>

<p>Согласитесь, довольно просто? Но это занимает 4-е строчки, 2-у уровня вложенности, и вдобавок мы делаем довольно тривиальную вещь. Вы можете уменьшить количество кода с помощью функций <strong>filter</strong>, <strong>lambda</strong> и <strong>map</strong>:</p>

<p>``` python
num = [1, 4, -5, 10, -7, 2, 3, -1]
filtered_and_squared = map(lambda x: x ** 2, filter(lambda x: x &gt; 0, num))
print filtered_and_squared</p>

<h1 id="section-2">[1, 16, 100, 4, 9]</h1>
<p>```</p>

<p>Теперь код расширяется горизонтально! Что можно сделать, что бы упростить код? Применить генераторы списков.</p>

<p>``` python
num = [1, 4, -5, 10, -7, 2, 3, -1]
filtered_and_squared = [ x**2 for x in num if x &gt; 0]
print filtered_and_squared</p>

<h1 id="section-3">[1, 16, 100, 4, 9]</h1>
<p>```</p>

<p>Генератор списков заключен в квадратные скобки, таким образом, видно что список производится сразу. В этом генераторе списка только один вызов функции и нет вызовов загадочной <strong>lambda</strong> - используется обычный итератор, выходное выражение и опциональное условие.</p>

<p>Но, есть и минусы: результирующий списов вычисляется и сохраняется в память сразу. Это не проблема для небольших списков, наподобие приведенных выше, или даже списков на порядок больших. Но иногда это может быть неэффективно.</p>

<p><strong>Генераторы</strong> выручат и сейчас. Выражение-генератор не загружает весь список в память сразу, а вместо этого создает объект генератора, поэтому за один раз можно получить только один элемент.</p>

<p>Выражения-генераторы имеют синтаксис, похожий на синтаксис генераторов списков, только вместо квадратных скобок - круглые:</p>

<p>``` python
num = [1, 4, -5, 10, -7, 2, 3, -1]
filtered_and_squared = ( x**2 for x in num if x &gt; 0 )
print filtered_and_squared</p>

<h1 id="generator-object-genexpr-at-0x00583e18">&lt;generator object <genexpr> at 0x00583E18&gt;</genexpr></h1>

<p>for item in filtered_and_squared:
    print item</p>

<h1 id="section-4">1, 16, 100 4,9</h1>
<p>```</p>

<p>Это даже немного эффективнее использования генераторов списков. Заменим пример более эффективным кодом:</p>

<p>``` python
num = [1, 4, -5, 10, -7, 2, 3, -1]</p>

<p>def square_generator(optional_parameter):
    return (x ** 2 for x in num if x &gt; optional_parameter)</p>

<p>print square_generator(0)
# &lt;generator object <genexpr> at 0x004E6418&gt;</genexpr></p>

<h1 id="option-i">Option I</h1>
<p>for k in square_generator(0):
    print k
# 1, 16, 100, 4, 9</p>

<h1 id="option-ii">Option II</h1>
<p>g = list(square_generator(0))
print g
# [1, 16, 100, 4, 9]
```</p>

<p>Использование выражения-генератора вероятно более хорошая практика, но вы не увидите разницы в эффективности, если список не очень велик.</p>

<p>Так же, вы можете использовать функцию <strong>zip</strong> для работы с двумя и более элементами за раз:</p>

<p>``` python
alist = [‘a1’, ‘a2’, ‘a3’]
blist = [‘1’, ‘2’, ‘3’]</p>

<p>for a, b in zip(alist, blist):
    print a, b</p>

<h1 id="a1-1">a1 1</h1>
<p># a2 2
# a3 3
```</p>

<p>Пример двухуровневого генератора с использованием <strong>os.walk()</strong>:</p>

<p>``` python
import os
def tree(top):
    for path, names, fnames in os.walk(top):
        for fname in fnames:
            yield os.path.join(path, fname)</p>

<p>for name in tree(‘C:\Users\XXX\Downloads\Test’):
    print name
```</p>

<h2 id="section-5">Декораторы</h2>

<p>Декораторы предоставляют очень удобный метод для добавления функциональности для существующих функций и классов. Похоже на АОП (аспектно-ориентированное программирование) в Java, не так ли? Кроме того, что это проще, а значит мощнее. Например, предположим вам нужно что-либо сделать на точках входа и выхода их функции (защиту, отслеживание, блокирование и др. - стандартные элементы АОП).</p>

<p>Декоратор - это функция, которая обертывает другую функцию: вызывается основная функция и ее результат передается в декоратор. Затем декоратор возвращает функцию, которая заменяет оборачиваемую функцию так как нужно.</p>

<p>``` python
def timethis(func):
    ‘’’
    Decorator that reports the execution time.
    ‘’’
    pass</p>

<p>@timethis
def countdown(n):
    while n &gt; 0:
        n -= 1
```</p>

<p>Символ <strong>@</strong> указывает на применение декоратора.</p>

<p>Теперь давайте реализуем код декоратора. Здесь мы фактически используем код декорируемой функции:</p>

<p>``` python
import time
from functools import wraps</p>

<p>def timethis(func):
    ‘’’
    Decorator that reports the execution time.
    ‘’’
    @wraps(func)
    def wrapper(<em>args, **kwargs):
        start = time.time()
        result = func(</em>args, **kwargs)
        end = time.time()
        print(func.<strong>name</strong>, end-start)
        return result
    return wrapper</p>

<p>@timethis
def countdown(n):
    while n &gt; 0:
        n -= 1</p>

<p>countdown(100000)</p>

<h1 id="countdown-0006999969482421875">(‘countdown’, 0.006999969482421875)</h1>
<p>```</p>

<p>Когда вы пишете код вроде этого:</p>

<p><code>python
@timethis
def countdown(n):
</code></p>

<p>это то же самое, как если бы выполнялось следующее</p>

<p>``` python
def countdown(n):
	…</p>

<p>countdown = timethis(countdown)
```</p>

<p>Код внитри декоратора обычно включает в себя создание новой функции, которая принимает любые аргументы (с использованием *args и **kwargs) как показано в случае с функцией wrapper в этом примере. Внутри этой функции вы принимает входные аргументы оригинальной функции и возвращаете результат. Однако, вы так же можете разместить там дополнительный код (например, замер времени и т.д.). Таким образов созданная функция-обертка возвращает результат, как если бы это была оригинальная функция.</p>

<p>Давайте рассмотрим другой пример:</p>

<p><code>python
@decorator
def function():
    print("inside function")
</code></p>

<p>Когда компилятор проходит этот код, <code>function()</code> компилируется и получившийся объект-функция передается в код декоратора <code>decorator</code>, который создает из нее другой объект-функцию, что бы заменить первоначальную функцию <code>function()</code>.</p>

<p>Как выглядит код декоратора? В основном в примерах показывают его как функцию, но я обнаружил, что легче разобраться в декораторах с помощью классов. Кроме того, классы дают больше возможностей.</p>

<p>Единственное ограничение на результат возвращаемый декоратором, это то, что он может быть вызван как функция - т.е. что его можно вызвать. Таким образом, любые классы, которые мы используем в качестве декораторов должны быть с методом <code>__call__</code>.</p>

<p>Что должен делать декоратор после вызова? Вообще-то, все что угодно, но обычно ожидается, что будет использован код оригинальной функции. Однако, это не обязательно:</p>

<p>``` python
class decorator(object):</p>

<pre><code>def __init__(self, f):
    print("inside decorator.__init__()")
    f() # Prove that function definition has completed
 
def __call__(self):
    print("inside decorator.__call__()")
</code></pre>

<p>@decorator
def function():
    print(“inside function()”)</p>

<p>print(“Finished decorating function()”)</p>

<p>function()</p>

<h1 id="inside-decoratorinit">inside decorator.<strong>init</strong>()</h1>
<p># inside function()
# Finished decorating function()
# inside decorator.<strong>call</strong>()
```</p>

<p>Практический пример:</p>

<p>``` python
def decorator(func):
    def modify(<em>args, **kwargs):
        variable = kwargs.pop(‘variable’, None)
        print variable
        x,y=func(</em>args, **kwargs)
        return x,y
    return modify</p>

<p>@decorator
def func(a,b):
    print a<strong>2,b</strong>2
    return a<strong>2,b</strong>2</p>

<p>func(a=4, b=5, variable=”hi”)
func(a=4, b=5)</p>

<h1 id="hi">hi</h1>
<p># 16 25
# None
# 16 25
```</p>

<h2 id="contextlib--">ContextLib (менеджеры контекста)</h2>

<p>Модуль <strong>contextlib</strong> содержит средства для работы с менеджерами контекста и оператором <strong>with</strong>. Обычно, что бы написать менеджер контекста, вы определяете класс с методами <code>__enter__()</code> и <code>__exit__()</code>. Например:</p>

<p>``` python
import time
class demo:
    def <strong>init</strong>(self, label):
        self.label = label</p>

<pre><code>def __enter__(self):
    self.start = time.time()
 
def __exit__(self, exc_ty, exc_val, exc_tb):
    end = time.time()
    print('{}: {}'.format(self.label, end - self.start)) ```
</code></pre>

<p>Полный пример:</p>

<p>``` python
import time</p>

<p>class demo:
    def <strong>init</strong>(self, label):
        self.label = label</p>

<pre><code>def __enter__(self):
    self.start = time.time()
 
def __exit__(self, exc_ty, exc_val, exc_tb):
    end = time.time()
    print('{}: {}'.format(self.label, end - self.start))
</code></pre>

<p>with demo(‘counting’):
    n = 10000000
    while n &gt; 0:
        n -= 1</p>

<h1 id="counting-136000013351">counting: 1.36000013351</h1>
<p>```</p>

<p>Менеджер контекста “включается” оператором <strong>with</strong>. Возвращаемый объект будет использоваться в контексте. Метод <code>__enter__()</code> выполняется, когда поток управления входит в блок кода внутри оператора <strong>with</strong>. Когда поток управления покидает блок кода внутри <strong>with</strong>, вызывается метод <code>__exit__()</code>, что бы очистить используемые ресурсы.</p>

<p>Заново напишем исходный пример, используя декоратор <code>@contextmanager</code> из модуля <strong>contextlib</strong>:</p>

<p>``` python
from contextlib import contextmanager
import time</p>

<p>@contextmanager
def demo(label):
    start = time.time()
    try:
        yield
    finally:
        end = time.time()
        print(‘{}: {}’.format(label, end - start))</p>

<p>with demo(‘counting’):
    n = 10000000
    while n &gt; 0:
        n -= 1</p>

<h1 id="counting-132399988174">counting: 1.32399988174</h1>
<p>```</p>

<p>В функции <code>demo(label)</code> весь код до оператора <strong>yield</strong> исполняется как метод менеджера контекста <code>__enter__()</code>. Весь код после оператора <strong>yield</strong> выполняется как метод <code>__exit__()</code>. Если в блоке внутри <strong>with</strong> возникнет исключение, оно “объявится” на месте оператора <strong>yield</strong>.</p>

<h2 id="section-6">Дескрипторы</h2>

<p>Дескрипторы определяют как осуществляется доступ к аттрибутам объекта. Дескриптор является способом изменить то, что происходит, когда вы обращаетесть к аттрибуту объекта.</p>

<p>Что бы создать дескриптор, нужно определить хотя бы один из следующих трех методов. Обратите внимание, что <code>instance</code> - это объект, к аттрибуту которого меняется доступ, а <code>owner</code> - класс, для которого дескриптор является аттрибутом.</p>

<p><code>__get__(self, instance, owner)</code> - вызывается, когда запрашивается аттрибут (value = obj.attr); то что возвращается будет передано коду, запрашивающему аттрибут.</p>

<p><code>__set__(self, instance, value)</code> - вызывается, когда аттрибуту устанавливается значение (obj.attr = value); ничего не возвращает.</p>

<p><code>__delete__(self, instance)</code> - вызывается, когда аттрибут объекта удалаяется (del obj.attr)</p>

<p>Ленивые аттрибуты:</p>

<p>``` python
import weakref</p>

<p>class lazyattribute(object):
    def <strong>init</strong>(self, f):
        self.data = weakref.WeakKeyDictionary()
        self.f = f
    def <strong>get</strong>(self, obj, cls):
        if obj not in self.data:
            self.data[obj] = self.f(obj)
        return self.data[obj]</p>

<p>class Foo(object):
    @lazyattribute
    def bar(self):
        print “Being lazy”
        return 42</p>

<p>f = Foo()</p>

<p>print f.bar
# Being lazy
# 42</p>

<p>print f.bar
```</p>

<blockquote>
  <p>Дескрипторы - это обобщение концепции связанных методов, лежащих в основе реализации классических классов. В классических классах, когда аттрибут экзампляра не найден в словаре экземпляра, поиск продолжается в словаре класса, а затем рекурсивно в словарях базовых классов. Когда аттрибут найден в словаре класса (не в словаре экземпляра), интерпретатор проверяет, является ли найденный объект функцией. Если это так, то возвращается не найденный объект, а обернутый объект, который действует как каррированая функция. Когда вызывается обернутый объект, он вызывает оригинальную функцию с экземпляром в качестве одного из аргументов.</p>
</blockquote>

<p>Как отмечено выше, дескрипторы закрепляются за классом, и когда осуществляется доступ к аттрибуту, автоматически вызываются специальные методы, причем используемый метод зависит от того, какой типа доступа осуществляется.</p>

<h2 id="section-7">Метаклассы</h2>

<p>Метаклассы предлагают мощный способ изменить поведение классов в Python.</p>

<p>Метакласс определяется как “класса класса”. Любой класс, экземпляры которого являются сами классы, является метаклассом.</p>

<p>``` python
class demo(object):
    pass</p>

<p>obj = demo()</p>

<p>print “Class of obj is {0}”.format(obj.<strong>class</strong>)
print “Class of obj is {0}”.format(demo.<strong>class</strong>)</p>

<h1 id="class-of-obj-is-class-maindemo">Class of obj is &lt;class ‘<strong>main</strong>.demo’&gt;</h1>
<p># Class of obj is &lt;type ‘type’&gt;
```</p>

<p>Мы создали класс и объект этого класса. Запросив у экземпляра аттрибут <code>__class__</code>, мы увидели, что это <code>demo</code>. Дальше интереснее. Что такое класс <code>demo</code>? У него мы тоже можем посмотреть аттрибут <code>__class__</code> - это <code>type</code>.</p>

<p>Итак, <code>type</code> - это класс классов в Python. Другими словами, в приведенном выше примере <code>obj</code> - это объект класса <code>demo</code>, сам класс <code>demo</code> является объектом <code>type</code>.</p>

<p>Таким образом это делает <code>type</code> метаклассом - в действительности наиболее часто используемый метакласс в Python, т.к. это дефолтный метакласс для всех классов.</p>

<p>Т.к. метакласс - это класс классов, он используется для создания классов (тех, что создают объекты). Но подождите, не мы ли создаем классы, когда определяем их стандартным способом? Все верно, но то что делает Python “под капотом” выглядит так:</p>

<ul>
  <li>когда встречается определение класса, Python собирает аттрибуты (включая методы) в словарь</li>
  <li>когда определение класса закончилось, Python определяет для него метакласс; давайте назовем его <em>Meta</em></li>
  <li>после Python выполняет <code>Meta(name, bases, dct)</code>, где:
    <ul>
      <li><code>Meta</code> - это метакласс, поэтому этот вызов создает его экземпляр</li>
      <li><code>name</code> - это имя только что созданного класса</li>
      <li><code>bases</code> - это кортеж базовых классов</li>
      <li><code>dct</code> - словарь, связывающий названия аттрибутов с объектами; в нем перечислены все аттрибуты класса</li>
    </ul>
  </li>
</ul>

<p>Как определить какой метакласс у класса? Если у класса (или один из его базовых классов) имеет аттрибут <code>__metaclass__</code>, то он считается метаклассом. В противном случае, метаклассом является <strong>type</strong>.</p>

<h2 id="section-8">Паттерны</h2>

<p><strong>“Проще просить прощения, чем разрешения”</strong></p>

<p>Один из принципов Python - “Проще просить прощения, чем разрешения”. В отличие от подхода “семь раз отмерь”, этот принцип заключается в том, что сначала вы должны попытаться выполнить действие и если возникает ошибка - реагировать соответствующим образом. Продвинутая обработка исключений в Python поддерживает этот принцип и помогает разрабатывать надежные и устойчивые программы.</p>

<p><strong>Синглтон (одиночка)</strong></p>

<p>Синглтон - это объекты, предполагающие наличие только одного экземпляра. Python предоставляет несколько путей для реализации синглтонов.</p>

<p><strong>Null object</strong></p>

<p>Null object может быть использован вместо <strong>None</strong>, что бы избежать проверки на None.</p>

<p><strong>Обозреватель</strong></p>

<p>Паттерн обозреватель позволяет нескольким объектам иметь доступ к общим данным.</p>

<p><strong>Конструктор</strong></p>

<p>Параметры конструктора часто назначаются переменным экземпляра. Этот паттерн может заменить много строк ручного присваивания одной строчкой.</p>

<h2 id="section-9">Заключение</h2>

<p>Спасибо за чтение. Оставляйте свои ​​комментарии для дальнейшего обсуждения.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Многопоточность в одну строку]]></title>
    <link href="http://toly.github.io/blog/2014/02/13/parallelism-in-one-line/"/>
    <updated>2014-02-13T13:53:13+04:00</updated>
    <id>http://toly.github.io/blog/2014/02/13/parallelism-in-one-line</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Перевод статьи Криса Кила <a href="https://medium.com/p/40e9b2b36148">Parallelism in one line</a></p>
</blockquote>

<p>Python имеет ужасную репутацию, когда речь идет о возможности параллельных вычислений. Не обращая внимания на типичные рассуждения о его потоках и GIL (который обычно нормально работает), по-моему реальная проблема многопоточности Python не техническая, а педагогическая. Распространенные руководства о библиотеках <strong>threading</strong> и <strong>multiprocessing</strong> в целом неплохие, но тяжеловаты для понимания. Они начинаются с глубоких вещей, и заканчиваются до просто применяемых практик.</p>

<!-- more -->

<h2 id="section">Традиционный пример</h2>

<p>Беглое ознакомление с первыми результатами поискового запроса на тему “Python threading tutorial” показывает, что почти каждый из них основан на  использовании какого-либо вспомогательного класса в связке с модулем <strong>Queue</strong>.</p>

<p>Типичный пример многопоточности вида поставщик-потребитель:</p>

<p>``` python
#Example.py
‘’’
Standard Producer/Consumer Threading Pattern
‘’’</p>

<p>import time 
import threading 
import Queue </p>

<p>class Consumer(threading.Thread): 
	def <strong>init</strong>(self, queue): 
		threading.Thread.<strong>init</strong>(self)
		self._queue = queue </p>

<pre><code>def run(self):
	while True: 
		# queue.get() blocks the current thread until 
		# an item is retrieved. 
		msg = self._queue.get() 
		# Checks if the current message is 
		# the "Poison Pill"
		if isinstance(msg, str) and msg == 'quit':
			# if so, exists the loop
			break
		# "Processes" (or in our case, prints) the queue item	
		print "I'm a thread, and I received %s!!" % msg
	# Always be friendly! 
	print 'Bye byes!'
</code></pre>

<p>def Producer():
	# Queue is used to share items between
	# the threads.
	queue = Queue.Queue()</p>

<pre><code># Create an instance of the worker
worker = Consumer(queue)
# start calls the internal run() method to 
# kick off the thread
worker.start() 

# variable to keep track of when we started
start_time = time.time() 
# While under 5 seconds.. 
while time.time() - start_time &lt; 5: 
	# "Produce" a piece of work and stick it in 
	# the queue for the Consumer to process
	queue.put('something at %s' % time.time())
	# Sleep a bit just to avoid an absurd number of messages
	time.sleep(1)

# This the "poison pill" method of killing a thread. 
queue.put('quit')
# wait for the thread to close down
worker.join()
</code></pre>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
	Producer()
```</p>

<p>Мда… Просматриваются Java’вские корни.</p>

<p>Что ж, я не хочу, что бы у вас создалось впечатление, будто схема поставщик-потребитель плоха для многопоточной разработки - это определенно не так. На самом деле такой способ хорошо подходит для решения множества задач. Однако, я думаю, что это не подходит для ежедневного применения.</p>

<h2 id="section-1">Проблемы (на мой взгляд)</h2>

<p>Во-первых, вам нужен шаблонный класс, который делает то, что нужно. Во-вторых, вам нужно организовать очередь, согласно которой будут обрабатываться объекты; и наконец, вам нужны методы для входа в очередь и выхода из очереди что бы делать реальную работу (скорее всего, с участием другой очереди, если вы хотите получать обратную связь или сохранять результаты работы).</p>

<h3 id="section-2">Больше воркеров, больше задач</h3>

<p>Следующее, что вы вероятно сделаете, это пулл воркеров, что бы выжать из Python больше производительности. Ниже приводится измененный код примера из превосходного <a href="http://www.ibm.com/developerworks/aix/library/au-threadingpython/">руководства</a> по многопоточности от IBM. Это достаточно распространенный сценарий, когда вы распределяете задачи получения веб-страниц на несколько потоков.</p>

<p>``` python
#Example2.py
‘’’
A more realistic thread pool example 
‘’’</p>

<p>import time 
import threading 
import Queue 
import urllib2 </p>

<p>class Consumer(threading.Thread): 
	def <strong>init</strong>(self, queue): 
		threading.Thread.<strong>init</strong>(self)
		self._queue = queue </p>

<pre><code>def run(self):
	while True: 
		content = self._queue.get() 
		if isinstance(content, str) and content == 'quit':
			break
		response = urllib2.urlopen(content)
	print 'Bye byes!'
</code></pre>

<p>def Producer():
	urls = [
		‘http://www.python.org’, ‘http://www.yahoo.com’
		‘http://www.scala.org’, ‘http://www.google.com’
		# etc.. 
	]
	queue = Queue.Queue()
	worker_threads = build_worker_pool(queue, 4)
	start_time = time.time()</p>

<pre><code># Add the urls to process
for url in urls: 
	queue.put(url)	
# Add the poison pillv
for worker in worker_threads:
	queue.put('quit')
for worker in worker_threads:
	worker.join()

print 'Done! Time taken: {}'.format(time.time() - start_time)
</code></pre>

<p>def build_worker_pool(queue, size):
	workers = []
	for _ in range(size):
		worker = Consumer(queue)
		worker.start() 
		workers.append(worker)
	return workers</p>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
	Producer()
```</p>

<p>Работает отлично, но посмотрите на весь этот код! Здесь методы инициализации, списки потоков для отслеживания работы, и что хуже всего, если вы склонны к обработке блокировок как и я, куча вызовов метода <strong>join</strong>. А впоследствии будет еще сложнее!</p>

<p>А что было сделано? Да практически ничего. Вышеприведенный код представляет собой хрупкую конструкцию. Это внимательное следование шаблону, это высокая вероятность ошибок (я даже забыл вызвать метод <em>task_done()</em> в объекте очереди пока писал это), и это писать много кода и получать мало функционала. К счастью, есть гораздо лучший способ.</p>

<h2 id="map">Знакомьтесь: <strong>Map</strong></h2>

<p><em>Map</em> - это класная маленькая функция, а главное, проста для распараллеливания вашего Python кода. Для тех, кто не вкурсе, <em>map</em> заимствована из функциональных языков, вроде Lisp’а. Это функция, которая применяет другую функцию к последовательности, например:</p>

<p><code>python
urls = ['http://www.yahoo.com', 'http://www.reddit.com']
results = map(urllib2.urlopen, urls)
</code></p>

<p>Этот код применяет метод <em>urlopen</em> к каждому элементу переданной последовательности и сохраняет полученные результаты в список. Это более-менее эквивалентно следующему коду:</p>

<p><code>python
results = []
for url in urls: 
    results.append(urllib2.urlopen(url))
</code></p>

<p>Функция <em>map</em> управляет итерацией последовательности, применяет нужную функцию, и в конце сохраняет все получившиеся результаты в список.</p>

<p>Почему это имеет значение? Потому, что используя определенные библиотеки, <em>map</em> делает использование многопоточности тривиальным!</p>

<p>Функция <em>map</em> с поддержкой многопоточности присутствует в двух библиотеках: <strong>multiprocessing</strong>, а так же малоизвестная, но неменее замечательная - <strong>multiprocessing.dummy</strong>.</p>

<p><em>Отступление:</em> Что это? Никогда не слышал о многопоточном клоне библиотеки <strong>multiprocessing</strong> под названием <em>dummy</em>? Я тоже не слышал до недавнего времени. Есть всего одно предложение на странице официальной документации библиотеки <strong>multiprocessing</strong>. И это предложение сводится к “Ах да, эта вещь существует”. Это печально, скажуя вам!</p>

<p><strong>multiprocessing.dummy</strong> представляет собой точный аналог модуля <strong>multiprocessing</strong>. Разница лишь в том, что <strong>multiprocessing</strong> работает с процессами, а <strong>multiprocessing.dummy</strong> использует треды (со всеми присущими им ограничениями). Поэтому, все что относится к одной библиотеке, относится и к другой. Это делает переключение между ними довольно простым.</p>

<h2 id="section-3">Приступим</h2>

<p>Для доступа к map-параллельной функции, сперва нужно импортировать модули в которых она содержится и создать пулл:</p>

<p>``` python
from multiprocessing import Pool
from multiprocessing.dummy import Pool as ThreadPool </p>

<p>pool = ThreadPool()
```</p>

<p>Последнее выражение делает то же, что и семистрочная функция <em>build_worker_pool</em> в приведенном ранее примере. А именно, создает кучу доступных воркеров, поготавливает их к выполнению задач, и сохраняет их в переменной, что бы к ним было легко обратиться.</p>

<p>Объекты из пула принимают несколько параметров, но сейчас упоминания стоит только один: <em>processes</em>. Этот параметр устанавливает количество воркеров в пуле. Если оставить это поле пустым, то по умолчанию оно будет равно количеству ядер в вашем процессоре.</p>

<p>В общем случае, если вы используете многопроцессовый пулл для ядро-раздельных задач, то больше ядер означает большуую скорость (я говорю это с многочисленными оговорками). Однако, когда речь идет о многопоточной обработке и делах связанных с сетью, это не так, и будет хорошей идеей поэксперементировать с размером пула.</p>

<p><code>python
pool = ThreadPool(4) # Sets the pool size to 4
</code></p>

<p>Если вы запустите слишком много потоков, вы затратите больше времени на переключения между ними, чем на полезную работу, так что в этом случае неплох поизменять параметры до тех пор, пока не найдет оптимальный вариант для вашей задачи.</p>

<p>Итак, теперь, когда созданы воркеры и простой способ распараллеливания в наших руках, давайте перепишем загрузку веб-страниц из предыдущего примера.</p>

<p>``` python
import urllib2 
from multiprocessing.dummy import Pool as ThreadPool </p>

<p>urls = [
	‘http://www.python.org’, 
	‘http://www.python.org/about/’,
	‘http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html’,
	‘http://www.python.org/doc/’,
	‘http://www.python.org/download/’,
	‘http://www.python.org/getit/’,
	‘http://www.python.org/community/’,
	‘https://wiki.python.org/moin/’,
	‘http://planet.python.org/’,
	‘https://wiki.python.org/moin/LocalUserGroups’,
	‘http://www.python.org/psf/’,
	‘http://docs.python.org/devguide/’,
	‘http://www.python.org/community/awards/’
	# etc.. 
	]</p>

<h1 id="make-the-pool-of-workers">Make the Pool of workers</h1>
<p>pool = ThreadPool(4) </p>

<h1 id="open-the-urls-in-their-own-threads">Open the urls in their own threads</h1>
<p># and return the results
results = pool.map(urllib2.urlopen, urls)</p>

<h1 id="close-the-pool-and-wait-for-the-work-to-finish">close the pool and wait for the work to finish</h1>
<p>pool.close() 
pool.join() 
```</p>

<p>Посмотрите на это! Код который на самом деле работает занимает 4 строки, 3 из которых формальны. Функция <strong>map</strong> сделала то же, что и предыдущий код в 40 строк с такой легкостью! Для проверки я испробовал оба подхода и попробовал различные размеры пула.</p>

<p>``` python
results = [] 
for url in urls:
	result = urllib2.urlopen(url)
	results.append(result)</p>

<h1 id="versus--------">——- VERSUS ——-</h1>

<h1 id="pool--------">——- 4 Pool ——-</h1>
<p>pool = ThreadPool(4) 
results = pool.map(urllib2.urlopen, urls)</p>

<h1 id="pool---------1">——- 8 Pool ——-</h1>
<p>pool = ThreadPool(8) 
results = pool.map(urllib2.urlopen, urls)</p>

<h1 id="pool---------2">——- 13 Pool ——-</h1>
<p>pool = ThreadPool(13) 
results = pool.map(urllib2.urlopen, urls)
```</p>

<h2 id="section-4">Результаты:</h2>

<p><code>
 						Single thread:  14.4 Seconds 
 						       4 Pool:   3.1 Seconds
 						       8 Pool:   1.4 Seconds
 						      13 Pool:   1.3 Seconds
</code></p>

<p>Потрясающе! Это так же показывает, почему полезно поэкспериментировать с размером пула. Любой пулл с более чем 9 воркерами быстро приводит в падению прироста скорости (на этом компе).</p>

<h1 id="section-5">Реальный пример №2</h1>
<p>Создание миниатюр для тысяч изображений</p>

<p>Теперь давайте сделаем что-нибудь процесорно-раздельное! Довольно распространенная задача у меня на работе - это обработка больших коллекций картинок. Одна из таких задач - создание миниатюр. И это можно распараллелить.</p>

<h2 id="section-6">Простая однопроцессная реализация</h2>

<p>``` python
import os
from PIL import Image</p>

<p>SIZE = (75, 75)
SAVE_DIRECTORY = ‘thumbs’</p>

<p>def get_image_paths(folder):
    return (os.path.join(folder, f)
            for f in os.listdir(folder)
            if ‘jpeg’ in f)</p>

<p>def create_thumbnail(filename):
    im = Image.open(filename)
    im.thumbnail(SIZE, Image.ANTIALIAS)
    base, fname = os.path.split(filename)
    save_path = os.path.join(base, SAVE_DIRECTORY, fname)
    im.save(save_path)</p>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
    folder = os.path.abspath(‘images_path’)
    os.mkdir(os.path.join(folder, SAVE_DIRECTORY))</p>

<pre><code>images = get_image_paths(folder)

for image in images:
    create_thumbnail(image) ```
</code></pre>

<p>Пример несколько адаптирован, но по сути происходит следующее: каталог с изображениями передается в программу, потом из каталога выбираются все картинки, и наконец создаются миниатюры и сохраняются в отдельный каталог.</p>

<p>На моем компьютере это выполняется за 27.9 секунд для порядка 6000 изображений.</p>

<p>Если мы заменим цикл <strong>for</strong> параллельной функцией <strong>map</strong>:</p>

<p>``` python
import os
from PIL import Image
from multiprocessing import Pool</p>

<p>SIZE = (75, 75)
SAVE_DIRECTORY = ‘thumbs’</p>

<p>def get_image_paths(folder):
    return (os.path.join(folder, f)
            for f in os.listdir(folder)
            if ‘jpeg’ in f)</p>

<p>def create_thumbnail(filename):
    im = Image.open(filename)
    im.thumbnail(SIZE, Image.ANTIALIAS)
    base, fname = os.path.split(filename)
    save_path = os.path.join(base, SAVE_DIRECTORY, fname)
    im.save(save_path)</p>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
    folder = os.path.abspath(‘images_path’)
    os.mkdir(os.path.join(folder, SAVE_DIRECTORY))</p>

<pre><code>images = get_image_paths(folder)

pool = Pool()
pool.map(create_thumbnail, images)
pool.close()
pool.join() ```
</code></pre>

<p><strong>5.6 секунд!</strong></p>

<p>Это серъезный прирост для изменения всего лишь нескольких строчек кода. Продакшен версия еще быстрее, так как в ней разделены процессорные задачи и задачи ввода-вывода на отдельные процессы и потоки - обычный рецепт для кода с учетом блокировок.</p>

<p>Так что, так. Распараллеливание в одну (почти) строку.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Начиная Python-проект: The Right Way]]></title>
    <link href="http://toly.github.io/blog/2014/02/09/starting-a-python-project-the-right-way/"/>
    <updated>2014-02-09T21:33:26+04:00</updated>
    <id>http://toly.github.io/blog/2014/02/09/starting-a-python-project-the-right-way</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Достаточно вольный (настолько вольный, что отсутствуют два абзаца и изменен код) перевод статьи Джефа Кнаппа </p>

  <p><a href="http://www.jeffknupp.com/blog/2014/02/04/starting-a-python-project-the-right-way/">Starting A Python Project The Right Way</a></p>
</blockquote>

<p>Если вы подобны большинству начинающих python-программистов, вы вероятно в состоянии представить себе работу приложения целиком, но когда приходит время начать писать код и перед вами пустое окно редактора, вы чувствуете себя потерянным и подавленным. В этой статье я опишу метод, который использую когда начинаю писать программу с нуля. К концу статьи у вас будет хороший план для начала разработки любого приложения.</p>

<!-- more -->

<h2 id="section">Установка</h2>

<p>До того как написать хоть строчку кода, первое что я делаю - создаю <em>виртуальное окружение</em>. Что такое виртуальное окружение? Это установка python отдельно от остальной части системы (и дефолтного pythona’а). Какая от этого польза? Представьте себе, что у вас есть два проекта, над которыми вы работаете. Если оба испольузют какую-либо библиотеку (например, <strong>requests</strong>), и в одном из проектов используется старая версия (которую нельзя корректно обновить, т.к. другие библиотеки используют старую версию <strong>requests</strong>), как вы сможете использовать новую версию <strong>requests</strong> в другом проекте? С помощью виртуального окружения.</p>

<p>Для начала установите <strong>virtualenvwrapper</strong> (обертка над фантастическим пакетом <strong>virtualenv</strong>). Добавьте в ваш <strong>.bashrc</strong> строчку <code>/usr/local/bin/virtualenvwrapper.sh</code> и перезагрузите свой профиль с помощью <strong>source</strong>:</p>

<pre><code>source ~/.bashrc
</code></pre>

<p>Теперь у вас должна появиться команда <strong>mkvirtualenv</strong>, доступная через автодополнение с помощью <em>tab</em>. Если вы используете Python старше версии 3.3, виртуальное окружение поддерживает этот язык и установка этого пакета не требуется. <code>mkvirtualenv &lt;my_project&gt;</code> создаст новое виртуальное окружение под названием my_project с уже установленными <strong>pip</strong> и <strong>setuptools</strong>. Для Python 3 требуемые команды выглядят так:</p>

<pre><code>python -m venv &lt;my_project&gt;
source &lt;my_project&gt;/bin/activate
</code></pre>

<p>Теперь когда виртуальное окружение создано, пришло время инициализировать средство управления исходниками. Предполагая что это <strong>git</strong> (ну, потому что он…), введем</p>

<pre><code>git init .
</code></pre>

<p>Так же полезно добавить в <strong>.gitignore</strong> все скомпилированые Python-ом файлы и каталоги <code>__pychache__</code>. Для этого создайте файл <code>.gitignore</code> и поместите в него следующее:</p>

<pre><code>*.pyc
__pycache__
</code></pre>

<p>Теперь подходящее время добавить в проект <strong>README</strong> файл. Даже если вы единственный, кто будет видеть код, это хорошее упражнение для организации ваших мыслей. <strong>README</strong> файл должен описывать что делает проект, его зависимости и как его использовать. Я пишу <strong>README</strong> файлы с использованием разметки <em>Markdown</em>, во-первых потому что GitHub автоматически оформляет любой файл названный <strong>README.md</strong>, а во-вторых потому что я пишу все (!) документы в разметке <em>Markdown</em>.</p>

<p>И наконец, сделайте первый коммит содержащий два файла (<strong>.gitignore</strong>, <strong>README.md</strong>), которые вы только что создали. Для этого введите:</p>

<pre><code>git add .gitignore README.md
git commit -m "initial commit"
</code></pre>

<h2 id="section-1">Каркасы!</h2>

<p>Почти каждое приложение я начинаю одинаково: создаю каркас приложения, состоящий из функций и классов с заполненой документацией, но без реализации. Я считаю, что необходимо сперва вынужденно писать документацию для функции, иначе если я не способен кратко описать что-либо, то у меня нет достаточно мыслей о проблеме.</p>

<p>В качестве примера приложения я использую скрипт, недавно написанный обучаемым во время одного из наших занятий. Цель скрипта - создать csv-файл, содержащий самые кассовые фильмы прошлого года (по версии IMDB) и ключевые слова связанные с этими фильмами на IMDB. Это был довольно простой проект, для того что бы завершить его за одно занятие, но достаточный по сложности, что бы требовать размышлений.</p>

<p>Сперва создайте основной файл, который будет точкой входа в приложение. Я назвал его <strong>imdb.py</strong>. Потом скопируйте следующий код в редактор:</p>

<p>``` python
	““Script to gather IMDB keywords from 2013’s top grossing movies.”””
	import sys</p>

<pre><code>def main():
    """Main entry point for the script."""
    pass

if __name__ == '__main__':
    sys.exit(main()) ```
</code></pre>

<p>Звучит неправдоподобно, но это вполне функциональная программа. Вы можете запустить ее и получить правильный код выхода (т.е. <strong>0</strong>, хотя справедливо отметить, что пустой файл будет так же возвращать правильный код). Затем я делаю заглушки для функций и/или классов, которые по моему мнению будут нужны:</p>

<p>``` python
	“"”Script to gather IMDB keywords from 2013’s top grossing movies.”””
	import sys</p>

<pre><code>URL = "http://www.imdb.com/search/title?at=0&amp;sort=boxoffice_gross_us,desc&amp;start=1&amp;year=2013,2013"

def main():
    """Main entry point for the script."""
    pass

def get_top_grossing_movie_links(url):
    """Return a list of tuples containing the top grossing movies of 2013 and link to their IMDB
    page."""
    pass

def get_keywords_for_movie(url):
    """Return a list of keywords associated with *movie*."""
    pass

if __name__ == '__main__':
    sys.exit(main()) ```
</code></pre>

<p>Выглядит сносно. Отмечу, что обе функции включают параметры (например, <strong>get_keywords_for_movie</strong> принимает параметр <strong>url</strong>). Это может показаться странным для заглушек. Зачем здесь параметры? Аргументация такая же, как и для предварительного документирования заглушек: если я не знаю какие агрументы должна принимать функция, значит я недостаточно об этом думал.</p>

<p>В этом месте я верятно закомичусь, т.к. проделал определенную часть работы, которую не хотел бы потерять. После этого перейдем к реализации. Я всегда начинаю с реализации функции <strong>main</strong>, т.к. “центр” использующий все остальные функции. Вот реализация функции <strong>main</strong> в <strong>imdb.py</strong>:</p>

<p>``` python
	import csv</p>

<pre><code>def main():
    """Main entry point for the script."""
    movies = get_top_grossing_movie_links(URL)
    with open('output.csv', 'w') as output:
        csvwriter = csv.writer(output)
        for title, url in movies:
            keywords = get_keywords_for_movie(
                'http://www.imdb.com{}keywords/'.format(url))
            csvwriter.writerow([title, keywords]) ```
</code></pre>

<p>Несмотря на то что <strong>get_top_grossing_movie_links</strong> и <strong>get_keywords_for_movie</strong> не реализованы, я знаю достаточно о том, как их использовать. Функция <strong>main</strong> делает именно то, что мы обсуждали вначале: получает самые кассовые фильмы года и пишет их в csv-файл вместе с их ключевыми словами.</p>

<p>Теперь все что осталось, это реализовать недостающие функции. Любопытно, что даже если мы знаем, что <strong>get_keywords_for_movie</strong> будет вызван после <strong>get_top_grossing_movie_links</strong>, мы можем реализовать их в том порядке, который больше нравится. Это не тот случай, когда пишешь скрипт с нуля и добавляешь функционал в том порядке, в которм идет разработка. Вы были бы вынуждены полностью написать первую функцию, прежде чем перети ко второй. Тот факт, что мы можем реализовать (и проверить!) функции в любом порядкепоказывает, что они слабо связаны.</p>

<p>Давайте первым реализуем функцию <strong>get_keywords_for_movie</strong>:</p>

<p><code>python
def get_keywords_for_movie(url):
    """Return a list of keywords associated with *movie*."""
    keywords = []
    response = requests.get(url)
    soup = BeautifulSoup(response.text)
    tables = soup.find_all('table', class_='dataTable')
    table = tables[0]
    return [td.text for tr in table.find_all('tr') for td in tr.find_all('td')]
</code></p>

<p>Мы используем библиотеки <strong>requests</strong> и <strong>BeautifulSoup</strong>, поэтому нам нужно установить их через <em>pip</em>.	Теперь можно внести в список зависимостей проекта новые библиотеки: <code>pip freeze requirements.txt</code> и закомитить изменения. Таким образом мы всегда сможем создать виртуальное окружение и установить именно те библиотеки (и версии) которые нужны для запуска приложения.</p>

<p>Наконец напишем реализацию для функции <strong>get_top_grossing_movie_links</strong>:</p>

<p><code>python
def get_top_grossing_movie_links(url):
    """Return a list of tuples containing the top grossing movies of 2013 and link to their IMDB
    page."""
    response = requests.get(url)
    movies_list = []
    for each_url in BeautifulSoup(response.text).select('.title a[href*="title"]'):
        movie_title = each_url.text 
        movies_list.append((movie_title, each_url['href']))
    return movies_list
</code></p>

<p>Вот финальное содержание <strong>imdb.py</strong>:</p>

<p>``` python
““Script to gather IMDB keywords from 2013’s top grossing movies.”””
import sys
import requests
from bs4 import BeautifulSoup
import csv</p>

<p>URL = “http://www.imdb.com/search/title?at=0&amp;sort=boxoffice_gross_us,desc&amp;start=1&amp;year=2013,2013”</p>

<p>def get_top_grossing_movie_links(url):
    “"”Return a list of tuples containing the top grossing movies of 2013 and link to their IMDB
    page.”””
    response = requests.get(url)
    movies_list = []
    for each_url in BeautifulSoup(response.text).select(‘.title a[href*=”title”]’):
        movie_title = each_url.text 
        movies_list.append((movie_title, each_url[‘href’]))
    return movies_list</p>

<p>def get_keywords_for_movie(url):
    “"”Return a list of keywords associated with <em>movie</em>.”””
    keywords = []
    response = requests.get(url)
    soup = BeautifulSoup(response.text)
    tables = soup.find_all(‘table’, class_=’dataTable’)
    table = tables[0]
    return [td.text for tr in table.find_all(‘tr’) for td in tr.find_all(‘td’)]</p>

<p>def main():
    “"”Main entry point for the script.”””
    movies = get_top_grossing_movie_links(URL)
    with open(‘output.csv’, ‘w’) as output:
        csvwriter = csv.writer(output)
        for title, url in movies:
            keywords = get_keywords_for_movie(‘http://www.imdb.com{}keywords/’.format(url))
            csvwriter.writerow([title, keywords])</p>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
    sys.exit(main())</p>

<p>```</p>

<p>Приложение, которое начиналось с пустого окна редактора готово. После запуска скрипт сгенерирует <strong>output.csv</strong>, содержащий именно то, что нужно. Для скрипта такого размера я не стал бы писать тесты, т.к. результат работы программы и есть тест. Тем не менее, написание тестов в данном случае возможно (так как наши функции слабо связаны), что бы проверить каждую функцию отдельно (изолированно).</p>

<h2 id="section-2">Заключение</h2>

<p>Надеюсь теперь у вас есть план действий для начала работы над python-проектом с нуля. Не смотря на то, что у каждого есть свой метод начала работы над проектом, скорее всего мой метод подойдет и вам. Как всегда, если у вас есть какие-либо вопросы, не стесняйтесь задавать их в комментариях или напишите мне на jeff@jeffknupp.com.</p>
]]></content>
  </entry>
  
</feed>
